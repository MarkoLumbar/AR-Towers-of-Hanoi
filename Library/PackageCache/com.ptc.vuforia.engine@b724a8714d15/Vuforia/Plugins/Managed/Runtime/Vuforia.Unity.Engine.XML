<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vuforia.Unity.Engine</name>
    </assembly>
    <members>
        <member name="P:Vuforia.AreaTargetCapture.Status">
            <summary>
            Get status of the capture
            </summary>
            <remarks>
            Always gives a well defined state
            </remarks>
        </member>
        <member name="P:Vuforia.AreaTargetCapture.StatusInfo">
            <summary>
            Get additional status info for the capture
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetCapture.GenerationProgress">
            <summary>
            Get progress information of the current generation in the range [0.0f, 1.0f]
            </summary>
            <remarks>
            Note that the capture has to be in status GENERATING or COMPLETED for this call to succeed.
            Otherwise this call will throw an exception
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCapture.GetGenerationTimeEstimate(System.Int32@)">
            <summary>
            Gets the estimated time remaining to complete the current generation in seconds.
            </summary>
            <remarks>
            The capture has to be in status GENERATING or COMPLETED for this call to succeed.
            It may take few seconds after the generation started for the time estimate to become available.
            </remarks>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationCamera.SetupCamera">
            <summary>
            Sets up the Camera for AR Foundation and driver
            </summary>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationCamera.Update">
            <summary>
            Submits the latest image and pose information to the driver
            if it is different than the previous ones
            </summary>
        </member>
        <member name="T:Vuforia.Internal.ARFoundation.ARFoundationCameraConfiguration">
            <summary>
            AR Foundation Configuration does not update the camera and projection matrix.
            Because video background rendering is done by AR Foundation.
            </summary>
            <remarks>
            However orientation change needs to be propagated to the engine so that
            ModelTarget can still snap.
            </remarks>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationImageProvider.CameraImageEvent(Vuforia.ARFoundation.ARFoundationImage)">
            <summary>
            When an image is received, converts it to driver format
            </summary>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationImageProvider.ConvertToNV21(Unity.Collections.NativeArray{System.Byte},Unity.Collections.NativeArray{System.Byte},Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a YUV420_888 image to NV21 format.
            Used for converting Android camera images.
            This implementation has two paths: fast and slow. There could be a device that needs the slow path.
            In the fast path, concatenates the y buffer and v buffer.
            Otherwise picks one byte at a time from u and v buffers
            </summary>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationImageProvider.ConvertToNV12(Unity.Collections.NativeArray{System.Byte},Unity.Collections.NativeArray{System.Byte},System.Int32)">
            <summary>
            Converts a YpCbCr420_8BiPlanarFullRange image to NV12 format.
            Used for converting iOS camera images.
            Concatenates y buffer and u buffer.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationImageProvider.CalculateBufferSize(System.Int32,System.Int32)">
            <summary>
            Calculates the required buffer size for image and allocates it if is different from the previous one
            </summary>
            <returns>Returns the correct ySize of the image</returns>
        </member>
        <member name="M:Vuforia.Internal.ARFoundation.ARFoundationPoseProvider.GetDevicePose">
            <summary>
            Gets device pose from AR Foundation as a transform.
            Then converts it to Vuforia Pose
            </summary>
        </member>
        <member name="T:Vuforia.Internal.ExternalCamera.ExternalCameraMonitor">
            <summary>
            Listens to SceneLoaded event and reinitializes the camera or the whole Engine
            if the required camera type is changed since last initialization
            </summary>
        </member>
        <member name="M:Vuforia.Internal.ExternalCamera.IExternalCameraFactory.CreateExternalCamera(Vuforia.Internal.Core.IEngine)">
            <summary>
            This MUST be called BEFORE any other Engine Initialization operation.
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnVuforiaInitialized">
            <summary>
            Triggered when Vuforia Engine has initialized
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnVuforiaStarted">
            <summary>
            Triggered after Vuforia has started delivering frame updates
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnVuforiaError">
            <summary>
            Triggered when a Vuforia lifecycle error occurs after initialization has finished
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnBeforeVuforiaDeInitialized">
            <summary>
            Triggered after Vuforia Engine Deinit is called, but before Vuforia Engine is deinitialized
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnVuforiaInitializedPublic">
            <summary>
            Triggered when Vuforia Engine has initialized, called after internal initialization is complete, used for public init callback
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnAfterVuforiaInitializedPublic">
            <summary>
            Triggered when Vuforia Engine has initialized
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.Engine.OnVuforiaStartedPublic">
            <summary>
            Triggered after Vuforia has started delivering frame updates
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.Init(System.String)">
            <summary>
            Initialize Vuforia
            </summary>
            <param name="recordingPath">Path to offline recording</param>
            <returns>
            Return false if Vuforia could not be initialized or is already initialized
            </returns>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.Init(System.String,System.IntPtr)">
            <summary>
            Initialize Vuforia
            </summary>
            <param name="driverName">Full file name of the Driver library.</param>
            <param name="userData">Optional user defined data to be passed into the library when it gets loaded.</param>
            <returns>
            Return false if Vuforia could not be initialized or is already initialized
            </returns>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.Start">
            <summary>
            Start Vuforia
            </summary>
            <returns>
            Return false if Vuforia is not initialized, could not be started, or is already running
            </returns>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.Stop">
            <summary>
            Stop Vuforia
            </summary>
            <returns>
            Return false if Vuforia is not initialized or not running
            </returns>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.Deinit">
            <summary>
            Deinit Vuforia
            </summary>
            <remarks>
            This call will stop Vuforia if it still running
            </remarks>
            <returns>
            Return false if Vuforia is not initialized yet
            </returns>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.OnInternalEngineShutdown">
            <summary>
            Internal Engine has stopped for some reason while running. The only way this could happen at the moment is
            when license checks returns with suspended, cancelled or deleted. Since the internal engine stopped, unsubscribe
            from updates, deinit the engine. 
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.onEngineErrorHandler(Vuforia.VuEngineError,System.IntPtr)">
            <summary>
            Callback to handle Engine lifecycle errors after the Engine instance has been created
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.Engine.ConfigureEngineErrorHandler(Vuforia.Internal.Core.IEngineConfigSet)">
            <summary>
            Add Engine configuration setting up a callback mechanism to handle Engine lifecycle errors
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.EnginePermissions">
            <summary>
            Requests all permissions that are needed to start engine.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.IDeviceInfo.IsSeethruEyewearDevice">
            <summary>
            Return true if Vuforia is running on HoloLens, Magic Leap or
            some third party see through device set by the VuforiaConfiguration.
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.IEngineConfigSet">
            <summary>
            Interface for Vuforia engine configurations
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Core.IEngineConfigSet.EngineConfigSet">
            <summary>
            Return wrapper engine config set instance
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.IStateProcessorFactory.CreateStateProcessor(System.Collections.Generic.IList{Vuforia.Internal.Observations.IObservationProvider},Vuforia.Internal.Observers.IObserverOffsetCalculator)">
            <summary>
            Create StateProcessor instance
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Core.IUnityLifeCycleListener.OnApplicationQuitDestroyEvent">
            <summary>
            Since this GameObject is never destroyed by us or on scene load, this destroy event gets called after
            Application quit and OnDestroy, and is therefore the latest event we can register
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.StateProcessorFactory">
            <summary>
            Factory for the StateProcessor instance
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.StaticInstances">
            <summary>
            Static class that gets rid of all src/Engine Singletons
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.VuforiaVersion">
            <summary>
            VALUES HERE ARE CHANGED AT BUILD TIME, DO NOT EDIT
            </summary>
        </member>
        <member name="F:Vuforia.Internal.Core.OneTimeInitialization.sHasApplicationStarted">
            <summary>
            One time setup before first scene is loaded
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Core.IEngineFactory">
            <summary>
            Factory for Vuforia engine instances
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Core.IEngineFactory.CreateEngineConfig(Vuforia.VuforiaConfiguration,Vuforia.FusionProviderOption)">
            <summary>
            Create Vuforia Engine configuration
            </summary>
            <remarks>
            The returned instance must be disposed of by the caller
            </remarks>
            <param name="vuforiaConfiguration">Vuforia configuration that is used with Engine initialization</param>
            <param name="fusionProviderOption">Setup option for the FusionProvider</param>
        </member>
        <member name="M:Vuforia.Internal.Core.IEngineFactory.CreateEngineConfig(Vuforia.VuforiaConfiguration,System.String)">
            <summary>
            Create Vuforia Engine configuration
            </summary>
            <remarks>
            The returned instance must be disposed of by the caller
            </remarks>
            <param name="vuforiaConfiguration">Vuforia configuration that is used with Engine initialization</param>
            <param name="recordingPath">Absolute file path to a Vuforia recording. Set to null if no recording should be played back</param>
        </member>
        <member name="M:Vuforia.Internal.Core.IEngineFactory.CreateEngineConfig(Vuforia.VuforiaConfiguration,System.String,System.IntPtr)">
            <summary>
            Create Vuforia Engine configuration
            </summary>
            <remarks>
            The returned instance must be disposed of by the caller
            </remarks>
            <param name="vuforiaConfiguration">Vuforia configuration that is used with Engine initialization</param>
            <param name="driverName">Full file name of the Driver library.</param>
            <param name="userData">Arbitrary user defined data to be passed into the library when it gets loaded.</param>
        </member>
        <member name="M:Vuforia.Internal.Core.IEngineFactory.CreateEngine(Vuforia.Internal.Core.IEngineConfigSet,System.Int32@)">
            <summary>
            Create Vuforia engine instance
            </summary>
            <remarks>
            The returned instance must be disposed of by the caller
            </remarks>
        </member>
        <member name="T:Vuforia.Internal.ModelTargetTrackingMode">
            <summary>
            Tracking modes to optimize tracking quality and robustness for different target types
            </summary>
        </member>
        <member name="F:Vuforia.Internal.ModelTargetTrackingMode.DEFAULT">
            <summary>
             Tracking parameters optimized to work well on a broad range of object types
            </summary>
        </member>
        <member name="F:Vuforia.Internal.ModelTargetTrackingMode.CAR">
            <summary>
             Tracking parameters optimized for car exteriors
            </summary>
        </member>
        <member name="F:Vuforia.Internal.ModelTargetTrackingMode.SCAN">
            <summary>
             Tracking parameters optimized for scanned models with photorealistic textures
            </summary>
        </member>
        <member name="T:Vuforia.Internal.TargetMotionHint">
            <summary>
            Motion hint
            </summary>
        </member>
        <member name="F:Vuforia.Internal.TargetMotionHint.STATIC">
            <summary>
            Optimize performance for objects that remain at the
            same location throughout the experience. Setting this
            value allows %Vuforia to reduce CPU and power
            consumption when PositionalDeviceTracker is enabled.
            </summary>
        </member>
        <member name="F:Vuforia.Internal.TargetMotionHint.ADAPTIVE">
            <summary>
            Automatically optimize performance for experiences ranging
            from mostly static objects to moving objects.
            \note Some target types do not support the full motion
            range, e.g. Model Target only allows limited object
            motion. Refer to the specific target documentation for
            more information on their behavior.
            </summary>
        </member>
        <member name="F:Vuforia.Internal.TargetMotionHint.DYNAMIC">
            <summary>
            Optimize performance for objects that are moved constantly,
            e.g. for interacting with the environment.
            </summary>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.INativeEngineDriverUserData">
            <summary>
            Interface for native Vuforia Driver user data structs
            </summary>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.NativeEngineDriverUserData`1">
            <summary>
            Generic to wrap native C API Vuforia Driver user data structs
            </summary>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.FileDriverUserData">
            <summary>
            Wrapper for native C API FileDriver user data struct
            </summary>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeObservationUtils.GetObserverIdFromVuObservation(Vuforia.IVuObservation)">
            <summary>
            Get the ID with which an IObserver can be found in the IEngine from a native observation
            </summary>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertNativeStatusInfoToUnity(Vuforia.IVuObservation)">
            <summary>
            Convert the status info of a native observation to Unity-specific status info
            </summary>
            <param name="observation">Native observation</param>
            <returns>The status info</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertNativePoseMatrixToUnityPose(Vuforia.VuMatrix44F)">
            <summary>
            Convert a native pose matrix to a Unity pose
            </summary>
            <param name="vuMatrix44F">Native 4x4 pose matrix</param>
            <returns>Unity pose</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertUnityPoseToNativePoseMatrix(Vuforia.Internal.Core.Pose)">
            <summary>
            Convert a Unity pose to a native pose matrix
            </summary>
            <param name="pose">Unity pose</param>
            <returns>Native 4x4 pose matrix</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertNativePoseMatrixToObserverPose(Vuforia.VuMatrix44F,Vuforia.VuObservationType)">
            <summary>
            Convert a native pose matrix to an observer-specific Unity pose
            </summary>
            <param name="nativePose">Native 4x4 pose matrix</param>
            <param name="observationType">Observation type</param>
            <returns>Observer-specific Unity pose</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertUnityObserverPoseToNativePoseMatrix(Vuforia.Internal.Core.Pose,Vuforia.VuObservationType)">
            <summary>
            Convert an observer-specific Unity pose to a native pose matrix
            </summary>
            <param name="pose">Observer-specific Unity pose</param>
            <param name="observationType">Observation type</param>
            <returns>Native 4x4 pose matrix</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.VuMatrix44FToMatrix4x4(Vuforia.VuMatrix44F)">
            <summary>
            Convert a native 4x4 pose matrix to a 4x4 Unity matrix
            </summary>
            <param name="matrix">4x4 native matrix</param>
            <returns>4x4 Unity matrix</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.Matrix4x4ToVuMatrix44f(UnityEngine.Matrix4x4)">
            <summary>
            Convert a 4x4 Unity matrix to a native 4x4 pose matrix
            </summary>
            <param name="matrix">4x4 Unity matrix</param>
            <returns>4x4 native matrix</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.RemoveDeviceOrientationRotation(UnityEngine.Matrix4x4,UnityEngine.ScreenOrientation)">
            <summary>
            Removes the Z rotation coming from native. Projection matrices should not be rotated with the
            screen orientation. That causes AR Camera to rotate as well. This method counter rotates to keep
            AR Camera not rotated. DevicePose is rotated similarly.
            </summary>
            <param name="projectionMatrix">matrix to rotate</param>
            <param name="orientation">Current screen orientation</param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertNativeAABBToUnityBounds(Vuforia.VuAABB)">
            <summary>
            Convert a native axis-aligned bounding box to a Unity-specific axis aligned bounding box
            </summary>
            <param name="aabb">Native axis-aligned bounding box</param>
            <returns>Unity-specific axis aligned bounding box</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertUnityBoundsToNativeAABB(UnityEngine.Bounds)">
            <summary>
            Convert a Unity-specific axis aligned bounding box to a native axis-aligned bounding box
            </summary>
            <param name="bounds">Unity-specific axis aligned bounding box</param>
            <returns>Native axis-aligned bounding box</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertNativeAABBToObserverBounds(Vuforia.VuAABB,Vuforia.VuObserverType)">
            <summary>
            Converts a native-specific bounding box to observer-specific one
            </summary>
            <param name="aabb">Native bounding box</param>
            <param name="observerType">observer</param>
            <returns>Observer-specific bounding box</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertUnityObserverBoundsToNativeAABB(UnityEngine.Bounds,Vuforia.VuObserverType)">
            <summary>
            Converts an observer-specific bounding box to native-specific one
            </summary>
            <param name="bounds">Observer-specific bounding box</param>
            <param name="observerType">observer</param>
            <returns>Native bounding box</returns>
        </member>
        <member name="M:Vuforia.Internal.NativeBridge.NativeToUnityConversionUtil.ConvertTextureToNativePixelBuffer(UnityEngine.Texture2D)">
            <summary>
            Convert a Texture2D into a pixel buffer
            </summary>
            <param name="texture">The supported formats are: RGB888, RGBA8888, GRAYSCALE. </param>
            <returns>The pixel buffer. null if the texture has an unsupported pixel format.</returns>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.iOSInterfaceOrientation">
            <summary>
            Native iOS enum.
            Based on: https://developer.apple.com/documentation/uikit/uiinterfaceorientation
            </summary>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.UWPDisplayOrientation">
            <summary>
            Native UWP enum.
            Based on: https://learn.microsoft.com/en-us/uwp/api/windows.graphics.display.displayorientations?view=winrt-22621#fields
            </summary>
        </member>
        <member name="T:Vuforia.Internal.NativeBridge.NativeEngineFactory">
            <summary>
            Factory for the Native C API Vuforia engine instance
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.AnchorObserver.CreateAnchorInstance(System.String,System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Create an anchor instance
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.AObserver">
            <summary>
            Abstract base class for implementation of IObserver interface
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.ASingleTargetObserver">
            <summary>
            Abstract base class for all observers that observe one native target
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.AVuObserver">
            <summary>
            Abstract base class for a VuObserver that has no native representation is only
            available inside the extension
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Observers.BarcodeObserver.OnBarcodeObserved">
            <summary>
            Event that is executed when a barcode is observed
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Observers.BarcodeObserver.ObservedTypes">
            <summary>
            All Barcode types that can be observed
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Observers.BarcodeObserver.DetectMultipleBarcodes">
            <summary>
            Flag to indicate if the observer can detect multiple barcodes in parallel
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.BarcodeObserver.#ctor(Vuforia.Internal.Core.IEngine,Vuforia.IVuBarcodeObserver)">
            <summary>
            Construct a new Barcode observer
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.BarcodeObserver.OnDispose">
            <summary>
            Called when the Barcode observer is disposed
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.BarcodeObserver.OnObservation(Vuforia.Internal.Observers.IObserverComponent,Vuforia.IVuObservation)">
            <summary>
            Callback that is executed for each Barcode observation
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.AObservationFilterComponent">
            <summary>
            A component that forwards observations to other observers for processing
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Observers.IPoseCalculatorComponent.Pose">
            <summary>
            The calculated pose in Unity scene space, without VirtualSceneScale applied
            </summary>
            <remarks>
            This is null if this observer is used as WCM origin and no pose update observation
            should be published
            </remarks>
        </member>
        <member name="P:Vuforia.Internal.Observers.ITargetStatusComponent.TargetStatus">
            <summary>
            The target status from the last observation
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Observers.OffsetComponent.UnityPose">
            <summary>
            This is the WCS pose of the behaviour on register. This is used in offset calculation which takes
            authoring in the scene into account.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.OffsetComponent.Init(System.Func{Vuforia.Internal.Core.Pose})">
            <summary>
            call this on register
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.ANativeObserver">
            <summary>
            Abstract base class for all observers wrapping a native Vuforia observer
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Observers.CloudImageTargetObserver.Requesting">
            <summary>
            Whether cloud reco is currently performing a request.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.CloudImageTargetObserver.TrackImageTarget(System.String)">
            <summary>
            Starts tracking an Image Target from a reported Cloud Image Target observation.
            </summary>
            <exception cref="T:System.Exception">Throws if tracking of the target could not be started.</exception>
        </member>
        <member name="M:Vuforia.Internal.Observers.CloudImageTargetObserver.UntrackImageTarget(System.String)">
            <summary>
            Stops tracking an Image Target.
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.IObserver">
            <summary>
            Interface for all observers
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Observers.IObserverWithName">
            <summary>
            Interface for all observers which report a name
            </summary>
        </member>
        <member name="F:Vuforia.Internal.Observers.MeshObservationBlock.Id">
            Unique id of the mesh block
        </member>
        <member name="F:Vuforia.Internal.Observers.MeshObservationBlock.Version">
            Current version of the mesh block, incremented each time it is updated
        </member>
        <member name="F:Vuforia.Internal.Observers.MeshObservationBlock.Mesh">
            Mesh data
        </member>
        <member name="M:Vuforia.Internal.Observers.MeshObservationBlock.Update(Vuforia.VuMeshObservationBlock,Vuforia.Internal.Observers.MeshObserver.MeshSource)">
            <summary>
            Update data from VuMeshObservationBlock
            </summary>
        </member>
        <member name="F:Vuforia.Internal.Observers.VuMarkObserver.mTrackedInstances">
            <summary>
            Tracked VuMark instances belonging to the template of this observer, identified by their runtime ID 
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Observers.ValidationAreaObserver.OnAssociatedObserverDestroyed(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Cleans up if the associated observer is destroyed such that this observer is not left in a weak state.
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Permissions.EmptyPermissionRequester">
            <summary>
            EmptyPermissions just invokes the callback and does not do any additional work
            Used on some platforms (i.e. UWP) that do not require any intermission
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Permissions.IPermissionRequester.Request(System.Collections.Generic.IEnumerable{Vuforia.Internal.Permissions.Permission})">
            <summary>
            Request multiple permissions
            </summary>
            <param name="permissions">The array of permissions to request.</param>
        </member>
        <member name="T:Vuforia.Internal.Permissions.PermissionCallbacksAndroid">
            <summary>
            Handles the PermissionCallbacks on Android
            It is important that the class does not derive from PermissionCallbacks itself because this will result
            in troubles with the event registration not functioning
            That's why this class composites the PermissionCallbacks instead of deriving from them
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Permissions.PermissionRequesterFactory">
            <summary>
            Factory to create permission requests on the different platforms
            UWP platform (Windows and HoloLens)
            </summary>
            <remarks>
            Does not require handling from us, the OS takes over the permission request as soon as they are needed.
            We only have to make sure the permissions are in the app manifest.
            </remarks>
        </member>
        <member name="T:Vuforia.Internal.Permissions.IOSPermissionRequester">
            <summary>
            Invokes a coroutine to check for the permissions.
            The script destroys itself after it returned with any result.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Permissions.IOSPermissionRequester.RequestPermissionInternal(UnityEngine.UserAuthorization)">
            <summary>
            Requests permission if it has not been granted.
            Between checks there is a 0.25s waiting period to guarantee that each call has enough time to perform
            </summary>
            <param name="permission">The permission to grant</param>
            <returns>Enumerator to call on a coroutine</returns>
        </member>
        <member name="T:Vuforia.Internal.Permissions.Permission">
            <summary>
            Device Permissions
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Rendering.TextureRenderer">
            <summary>
            Helper class that renders a given texture into a RenderTexture on demand.
            Used to buffer frames coming from the web cam stream
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Rendering.VideoBackgroundBehaviour.DefaultRotationTowardsCamera">
            <summary>
            The default rotation that is applied to the Background Plane to align it towards the camera, before applying any
            orientation or mirroring rotations on top of that.
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Rendering.VideoBackgroundRenderer.Material">
            <summary>
            The material used to render the video background
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Rendering.VideoBackgroundRenderer.VideoBackgroundBehaviour">
            <summary>
            The VideoBackground Behaviour
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Rendering.VideoBackgroundRenderer.VideoBackgroundTexture">
            <summary>
            The texture the video background is rendered into
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Rendering.VideoBackgroundTextureUpdater">
            <summary>
            Video texture update using Unity's Texture2D.GetRawTextureData() method to update the texture from the Update loop.
            The main motivation for this class is to work around the issue of screen tearing on Metal when using CommandBuffer rendering.
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Rendering.VBAugmentationFactory">
            <summary>
            VBAugmentation is the name for Watermark
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Rendering.VBAugmentationRenderer">
            <summary>
            This is the WatermarkRenderer class, name purposely chosen to be vague, to make it slightly less easy to find watermarking code
            Comments are stripped during compilation
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Simulator.SimulatedRuntimeMeshBehaviour">
            <summary>
            This class represents an RuntimeMeshBehaviour for Area Targets in Simulator Mode
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Simulator.SimulatedRuntimeMeshBehaviour.OnMeshBlockAdded">
            <summary>
            Event that is executed when a new Mesh Block was added.
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Simulator.SimulatedRuntimeMeshBehaviour.OnMeshBlockUpdated">
            <summary>
            Event that is executed when a Mesh Block was updated.
            </summary>
        </member>
        <member name="E:Vuforia.Internal.Simulator.SimulatedRuntimeMeshBehaviour.OnMeshBlockRemoved">
            <summary>
            Event that is executed when a Mesh Block is removed.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.SimulatedRuntimeMeshBehaviour.Initialize(Vuforia.AreaTargetBehaviour)">
            <summary>
            Initialize the SimulatedRuntimeMeshBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.SimulatedNativeVuMarkObservation.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.VuSimulatedImage.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.VuSimulatedObservation.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.VuSimulatedObservation.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Simulator.VuSimulatedObservation.Dispose(System.Boolean)">
            <summary>
            Internal dispose method
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Simulator.SimulatorOcclusionLayerHandler">
            <summary>
            The class is taking care of the runtime creation of the VuforiaOcclusion layer, which is used for non-occlusion
            rendering AreaTargets without occluding other objects in the Simulator mode
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.Environment.IPlatformEvaluator.GetRuntimePlatform">
            <returns>Returns the current active platform</returns>
        </member>
        <member name="T:Vuforia.Internal.Utility.Environment.PlatformEvaluator">
            <summary>
            PlatformEvaluator evaluates the currently active platform that is run
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.ExtensionMethods.Matrix4x4Extensions.GetTRSProperties(UnityEngine.Matrix4x4,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@)">
            <summary>
            Code taken from UnityGLTF.Extensions.SchemaExtensions.GetTRSProperties()
            https://github.com/KhronosGroup/UnityGLTF/blob/master/UnityGLTF/Assets/UnityGLTF/Runtime/Scripts/Extensions/SchemaExtensions.cs#L78
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.ExtensionMethods.Matrix4x4Extensions.GetTRSFromVuforiaSpace(UnityEngine.Matrix4x4,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@)">
            <summary>
            Converts a Unity Matrix4x4 (in Vuforia Coordinate System) to Unity TRS (in Unity Coordinate System).
            </summary>
        </member>
        <member name="T:Vuforia.Internal.Utility.ExtensionMethods.UnityComponentExtensions">
            <summary>
            Provides exensions for Unity Components
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.GetOutlineMaterials(UnityEngine.GameObject)">
            <summary>
            Returns the outline materials currently used for model targets
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.GetMaxBounds(UnityEngine.GameObject)">
            <summary>
            Calculates the bounding box of a game object
            </summary>
            <param name="g">the game object representing the extracted model</param>
            <returns>The 3D axis aligned bounding box</returns>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.ApplyMaterials(UnityEngine.GameObject,UnityEngine.Material[])">
            <summary>
            Applies the outline material to the ModelTarget
            </summary>
            <param name="modelTargetGameObject">Root GameObject</param>
            <param name="materials">Material which should be applied</param>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.Initialize(System.String,UnityEngine.Material[],System.Boolean)">
            <summary>
            Initialize the model extraction, so initialzing file names, paths, cachedfiles
            Also clearing variables
            </summary>
            <param name="path">The path to the glTF model</param>
            <param name="sourceMaterials">The material to be used in the extracted model</param>
            <param name="ignoreMaterials">If the parser should ignore the materials specified in the glTF file</param>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.Initialize(System.String,System.String,UnityEngine.Material[],System.Boolean)">
            <summary>
            Initialize the model extraction, so initialzing file names, paths, cachedfiles
            Also clearing variables
            </summary>
            <param name="path">The path to the glTF model</param>
            <param name="datFilePath">dataset zip file path containing the gltf file</param>
            <param name="ignoreMaterials">If the parser should ignore the materials specified in the glTF file</param>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.GetTextures">
            <summary>
            Creates the Texture2D list from the cached files
            </summary>
            <returns>List of textures about the glTF file</returns>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.GetMaterials">
            <summary>
            Creates the list of materials which are used for the texturing of the glTF model's mesh
            </summary>
            <returns>Created materials with applied textures</returns>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFExtractorUtility.CreateMeshes">
            <summary>
            Creates the meshes based on the glTF file content, also applies materials and do the parenting of meshes
            </summary>
            <returns>Returns with the root gameObject</returns>
        </member>
        <member name="M:Vuforia.Internal.Utility.GLTFLoading.GLTFSceneList.#ctor(System.IntPtr)">
            <summary>
            Ownership of nativeSceneList is not passed to GLTFSceneList!
            </summary>
            <param name="nativeSceneList"></param>
        </member>
        <member name="T:Vuforia.Internal.Utility.IRuntimeEnvironment">
            <summary>
            An interface to control some static functionality regarding
            if running in PlayMode or AR Foundation. Mainly for testing environment
            </summary>
        </member>
        <member name="P:Vuforia.Internal.Utility.Log.Instance">
            <summary>
            Use to set the static logger
            </summary>
        </member>
        <member name="M:Vuforia.Internal.Utility.VuforiaCoroutineUtility.RunCoroutineWithTimeout(System.Collections.IEnumerator,System.Single,System.Action{System.Boolean})">
            <summary>
            Run a coroutine with a timeout.
            </summary>
            <remarks>
            This is a pretty basic timeout logic. It waits for the enumerator to yield. For example, if it
            is on a WaitForSeconds(10) but with a timeout 5s, it will wait for 10s then will end with a timeout
            without further processing
            </remarks>
            <param name="routine">Coroutine to run</param>
            <param name="timeout">Timeout in seconds</param>
            <param name="onComplete">Completion callback with timeout information</param>
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.AnchorStatus">
            enum to describe anchor update reason
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.AnchorStatus.ADDED">
            Anchor(s) added
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.AnchorStatus.UPDATED">
            Anchor(s) updated
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.AnchorStatus.REMOVED">
            Anchor(s) removed
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.AnchorStatus.PAUSED">
            Anchor(s) paused
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.Capability">
            <summary>
            Describes drivers capabilities.
            Camera image is always supported.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.DevicePose.#ctor(UnityEngine.Transform,System.UInt64,UnityEngine.Matrix4x4)">
            <summary>
            Creates a Right handed Vuforia pose from a Left handed Unity
            Flips y component and z axis.
            </summary>
            <param name="orientationAdjuster">Matrix to handle screen rotation. Pass in identity for no effect</param>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.DevicePose.Update(UnityEngine.Transform,System.UInt64,UnityEngine.Matrix4x4)">
            <summary>
            Updates the device pose data
            </summary>
            <param name="orientationAdjuster">Matrix to handle screen rotation. Pass in identity for no effect</param>
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.DriverData">
            <summary>
            Data used in driver initialization
            </summary>
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.UnityDriverUserData">
            <summary>
            Wrapper for native C API UnityDriver user data struct
            </summary>
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.FileDriverPlaybackMode">
            Enum that defines File Driver playback behavior
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.FileDriverPlaybackMode.RESPECT">
            Respect recording timestamp, play in real time, drop frames if engine cannot keep up
        </member>
        <member name="F:Vuforia.Internal.VuforiaDriver.FileDriverPlaybackMode.WAIT">
            Wait for engine to process every frame, otherwise play as fast as possible
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.IFileDriver">
            <summary>
            Interface to work with File Driver.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.GetPlaybackPosition">
            <summary>
            Get the current playback position in milliseconds.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.GetSequenceDuration">
            <summary>
            Get the duration of the currently loaded sequence in milliseconds.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.SetPlaybackStartTime(System.UInt64)">
            <summary>
            Set the playback start position in milliseconds relative to the start of the sequence.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.SetPlaybackEndTime(System.UInt64)">
            <summary>
            Set the playback end position in milliseconds relative to the start of the sequence.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.SetPlaybackLoop(System.UInt32)">
            <summary>
            Configure sequence playback looping (0 = infinite, 1... = limited number of loops)
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IFileDriver.SetPlaybackMode(Vuforia.Internal.VuforiaDriver.FileDriverPlaybackMode)">
            <summary>
            Configures the playback mode of the current FileDriver instance
            </summary>
        </member>
        <member name="T:Vuforia.Internal.VuforiaDriver.IUnityDriver">
            <summary>
            Interface to work with Unity Driver.
            </summary>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.IUnityDriver.CreateDriverData">
            <summary>
            Creates user data used to initialize the driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vuforia.Internal.VuforiaDriver.NativeUnityDriver.CreateDriverData">
            <summary>
            Creates a user data for Unity Driver.
            Dispose it after.
            </summary>
            <returns>Native data struct.</returns>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.CreateCapture">
            <summary>
            Create a new capture with the specified configuration
            </summary>
            <remarks>
            Any previously created capture has to be destroyed first.
            The created capture has status INITIALIZED.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Start">
            <summary>
            Start the capture
            </summary>
            <remarks>
            This switches the capture to status PREPARING if not already done so.
            Fails if the capture is not in INITIALIZED state
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Stop">
            <summary>
            Stop the capture
            </summary>
            <remarks>
            The capture stops data acquisition, and switches to status STOPPED.
            Fails if the capture is not in PREPARING, CAPTURING or PAUSED state.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Pause">
            <summary>
            Pause the capture
            </summary>
            <remarks>
            The capture pauses data acquisition, and switches to status PAUSED.
            Fails if the capture is not in PREPARING or CAPTURING state.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Resume">
            <summary>
            Resume the capture
            </summary>
            <remarks>
            The capture resumes data acquisition, and switches to either PREPARING
            or CAPTURING. Fails if the capture is not in PAUSED state.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Generate(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Generate the target from the captured data
            </summary>
            <param name="clientId">The client id</param>
            <param name="clientSecret">The client secret</param>
            <param name="targetName">Target name for the capture.
            It is required to respect the following restrictions:
            Length: 1 - 64 characters
            Allowed ASCII characters: numerals, literals, dash, underscore</param>
            <param name="outputDirectory">Target folder to save the capture</param>
            <param name="generateAuthoringFiles">Generate authoring artifacts for the target</param>
            <param name="generatePackages">If set to true, make sure that "generateAuthoringFiles" is set to true, too</param>
            <param name="generateDatabase">Generates then area target database files</param>
            <param name="alignmentDatabasePath">Optional path to database containing an Area Target to use for alignment of the generated Area Target Capture</param>
            <param name="alignmentTargetName">Optional name of the target to use for alignment</param>
            <remarks>
            This function generates an Area Target from the Area Target Capture instance.
            The capture is required to have status STOPPED, only then will it generate a
            target from the captured data.
            If the configuration is valid, the capture switches to status GENERATING,
            and returns true. If the configuration is invalid, false is returned, and the
            optional error parameter will hold an error code that reflects the cause of the
            error.
            </remarks>
            <remarks>
            Area Target generation runs in the background, and when it completes the capture
            switches back to status STOPPED. The generation specific status info values report
            GENERATION_SUCCESS on successful generation, or hold one of the GENERATION_ERROR
            codes to report the failure cause. If Area Target generation was canceled, status
            info holds the value GENERATION_CANCELED.
            </remarks>
            <remarks>
            A target can only be generated if the capture accumulated sufficient data to switch from the
            PREPARING status to the CAPTURING status. If that is not the case, the error code will report
            INSUFFICIENT_DATA.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.Destroy">
            <summary>
            Destroy the capture
            </summary>
            <remarks>
            The capture will be cancelled if it is running
            </remarks>
        </member>
        <member name="P:Vuforia.IAreaTargetCapture.Status">
            <summary>
            Get status of the capture
            </summary>
            <remarks>
            Always gives a well defined state
            </remarks>
        </member>
        <member name="P:Vuforia.IAreaTargetCapture.StatusInfo">
            <summary>
            Get additional status info for the capture
            </summary>
        </member>
        <member name="P:Vuforia.IAreaTargetCapture.GenerationProgress">
            <summary>
            Get progress information of the current generation in the range [0.0f, 1.0f]
            </summary>
            <remarks>
            Note that the capture has to be in status GENERATING or COMPLETED for this call to succeed.
            Otherwise this call will throw an exception
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.GetGenerationTimeEstimate(System.Int32@)">
            <summary>
            Gets the estimated time remaining to complete the current generation in seconds.
            </summary>
            <remarks>
            The capture has to be in status GENERATING or COMPLETED for this call to succeed.
            It may take few seconds after the generation started for the time estimate to become available.
            </remarks>
        </member>
        <member name="M:Vuforia.IAreaTargetCapture.CancelGeneration">
            <summary>
            Cancel target generation
            </summary>
            <remarks>
            A helper function to abort a running target generation. If the target generation
            has been canceled successfully, then status info will hold GENERATION_CANCELED.
            </remarks>
            <remarks>
            This function blocks until target generation has aborted
            </remarks>
            <remarks>
            Returns true if the capture is in status GENERATING, false otherwise.
            </remarks>
        </member>
        <member name="T:Vuforia.BaseCameraConfiguration">
            <summary>
            This camera configuration implementation handles a few basic functionalities that are used in
            all inheriting classes.
            </summary>
        </member>
        <member name="M:Vuforia.CameraConfigurationUtility.ExtractVerticalCameraFoV(UnityEngine.Matrix4x4)">
            <summary>
            Extracts the vertical field of view from a perspective projection matrix in degrees
            </summary>
        </member>
        <member name="M:Vuforia.CameraConfigurationUtility.ExtractHorizontalCameraFoV(UnityEngine.Matrix4x4)">
            <summary>
            Extracts the horizontal field of view from a perspective projection matrix in degrees
            </summary>
        </member>
        <member name="M:Vuforia.CameraConfigurationUtility.SetFovForCustomProjection(UnityEngine.Camera)">
            <summary>
            Calculates the vertical FoV from the camera's projection matrix and assigns it to the camera.
            This method is only useful when a custom projection matrix has been defined.
            </summary>
        </member>
        <member name="P:Vuforia.CameraController.ARCamera">
            <summary>
            The Unity Camera on the ARCamera device
            </summary>
        </member>
        <member name="M:Vuforia.CameraController.EnableAutomaticFocusPointSelection(System.Boolean)">
            <summary>
            This method can be used to toggle automatic setting of the focus plane on HoloLens.
            It should only be called after Vuforia has started (e.g. VuforiaStartedCallback)
            By default, this is set to true, and Vuforia will automatically set the focus plane to the last
            detected target.
            However, if an the focus plane should be set to a hologram significantly offset from a target,
            this method should be used to disable automatic focus plane setting and it should be done from 
            application code instead
            </summary>
        </member>
        <member name="T:Vuforia.NullWebCamTexAdaptor">
            <summary>
            Null implementation for a WebCamTexture
            Used in case no webcam is connected
            </summary>
        </member>
        <member name="P:Vuforia.NullWebCamTexAdaptor.DidUpdateThisFrame">
            <summary>
            fake the requested fps - report back a new frame every x milliseconds
            if we reported back a new frame every time, this would cause a performance issue.
            </summary>
        </member>
        <member name="T:Vuforia.ICameraConfiguration">
            <summary>
            An interface encapsulating any code that updates Unity camera objects (IPD, projection matrices)
            and configures and draws the video background
            </summary>
        </member>
        <member name="P:Vuforia.ICameraController.CameraConfiguration">
            <summary>
            The camera configuration
            </summary>
        </member>
        <member name="P:Vuforia.ICameraController.ARCamera">
            <summary>
            The Unity Camera on the ARCamera device
            </summary>
        </member>
        <member name="M:Vuforia.ICameraController.EnableAutomaticFocusPointSelection(System.Boolean)">
            <summary>
            This method can be used to toggle automatic setting of the focus plane on HoloLens.
            It should only be called after Vuforia has started (e.g. VuforiaStartedCallback)
            By default, this is set to true, and Vuforia will automatically set the focus plane to the last
            detected target.
            However, if an the focus plane should be set to a hologram significantly offset from a target,
            this method should be used to disable automatic focus plane setting and it should be done from 
            application code instead
            </summary>
        </member>
        <member name="T:Vuforia.IWebCamTexAdaptor">
            <summary>
            This interface serves as a thin abstraction layer between Unity's WebCamTexture and Vuforia
            It is also Null-implemented for the case where no webcam is connected.
            </summary>
        </member>
        <member name="T:Vuforia.MonoCameraConfiguration">
            <summary>
            This rendering state implementation handles parameter control of a single 
            mono camera. It controls video background configuration and setting the projection matrix for that camera.
            This configuration is used for handheld mobile devices and video see-thru, monocular eyewear (e.g. Vuzix M300)
            </summary>
        </member>
        <member name="M:Vuforia.MonoCameraConfiguration.ConfigureVideoBackground(UnityEngine.Matrix4x4)">
            <summary>
            This method configures the video background based on the current orientation, viewport size,
            reflection setting and scene scale. It will invoke the OnVideoBackgroundConfigChanged callback when finished.
            </summary>
            <param name="projectionMatrix"></param>
        </member>
        <member name="M:Vuforia.MonoCameraConfiguration.CheckForSurfaceChanges(UnityEngine.Matrix4x4)">
            <summary>
            This method is used to check each frame for changes in orientation, view port size or far clip plane distance.
            If a change is detected, the video background is reconfigured and the projection matrix updated.
            </summary>
        </member>
        <member name="T:Vuforia.NullCameraConfiguration">
            <summary>
            This state is selected if Vuforia does not render the video background and does not
            control cameras parameters.
            </summary>
        </member>
        <member name="T:Vuforia.NullWebCam">
            <summary>
            The simulator camera is used as a dummy implementation of the WebCam when we are using Simulation Mode.
            It does NOT provide the SDK with web cam images, but instead mocks the web cam and fulfils the requirements
            to run the SDK in Simulation Mode.
            </summary>
        </member>
        <member name="M:Vuforia.WebCam.ComputeResampledTextureSize">
            <summary>
            Computes the new resampled texture size depending on the configured width and the aspect of the actual web cam texture
            </summary>
        </member>
        <member name="T:Vuforia.WebCamProfile">
            <summary>
            This class loads a xml file from the streamingassets folder that contains
            information about the webcamera that is used in the emulator
            Most of the code is excluded via ifdefs outside of the editor to avoid
            importing larger Mono libraries for XML parsing when build for a mobile device
            </summary>
        </member>
        <member name="M:Vuforia.WebCamProfile.GetProfile(System.String)">
            <summary>
            Returns the profile data for the given webcam model.
            If none is found, the default profile will be returned.
            </summary>
        </member>
        <member name="M:Vuforia.WebCamProfile.ProfileAvailable(System.String)">
            <summary>
            Returns true if a profile for the given webcam exists
            </summary>
        </member>
        <member name="T:Vuforia.WebCamTexAdaptor">
            <summary>
            This class serves as a thin abstraction layer between Unity's WebCamTexture and Vuforia
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetMeshPreview.DetermineShaderType(UnityEngine.GameObject)">
            <summary>
            Determines whether the mesh needs the VertexColor shader or not
            This is determined by the color array of the mesh.
            If colors are present, the vertex color shader should be use.
            A textured mesh (which uses the texture shader) does not have any colors stored. 
            </summary>
            <param name="gameObject">The game object to test on</param>
            <returns>The shader type</returns>
        </member>
        <member name="T:Vuforia.LegacyCylinderTargetPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Class to hold the references to old legacy content. 
            </summary>
        </member>
        <member name="T:Vuforia.LegacyImageTargetPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Class to hold the references to old legacy content. 
            </summary>
        </member>
        <member name="T:Vuforia.LegacyModelTargetPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Class to hold the references to old legacy content. 
            </summary>
        </member>
        <member name="T:Vuforia.LegacyMultiTargetPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Class to hold the references to old legacy content. 
            </summary>
        </member>
        <member name="T:Vuforia.LegacyVuMarkTargetPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Class to hold the references to old legacy content. 
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetPreview.UpdateVirtualScale(System.Single)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetPreview.UpdateVirtualScale(System.Single)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetPreview.UpdatePreviewProperties">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetPreview.UpdateVirtualScale(System.Single)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetPreview.ReSizeLegacy(UnityEngine.GameObject)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetPreview.UpdateVirtualScale(System.Single)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.SetupForSimulator(Vuforia.ObserverBehaviour,UnityEngine.Transform)">
            <summary>
            Special case, where we are using the preview during runtime, in the Editor as the simulated Target's
            real-life counterpart.
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.UpdatePreview">
            <summary>
            Updating the current preview by:
            - Checking its validity -> destroy or keep
            - Creating a new one if the previous was destroyed
            - or Updating the current one if values were modified
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.CreatePreview">
            <summary>
            Function which creates and or loads resources for the Preview of the given target.
            Note: Please always use base.CreatePreview() (- since it sets the names) unless you have a
            special case for ShouldDestroyPreview() 
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.DestroyPreview">
            <summary>
            Destroys the preview. mPreview can be null if it is called from DestroyThis
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.UpdatePreviewProperties">
            <summary>
            A call for updating the Preview's properties, like Material, Mesh or other
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.ShouldDestroyPreview">
            <summary>
            Defines the condition(s) upon the Preview Object has to be destroyed
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.UpdateVirtualScale(System.Single)">
            <summary>
            Updates the Preview's scale based on the Virtual Scale Factor
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.DestroyThis">
            <summary>
            Destroys the given Preview and this Behaviour - which is/was attached to a TargetBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.ExtractTargetAndDatasetName(System.String@,System.String@)">
            <summary>
            Extracts the Target's existing targetName and datasetName - this can differ from mTargetName and mDatasetName
            in case the user changes the selected Target
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Checking if legacy content is present on the currentObject.
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY: Cleans up the older content on the currentObject, and applies the new Preview.
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.IsUsingLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY: Has to update the old preview here, if it is currently in use.
            </summary>
        </member>
        <member name="M:Vuforia.TargetPreview.IsVisible">
            <summary>
            Used by TargetPreviewEditor, it checks if the Preview is visible or not.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vuforia.ConfigData">
            <summary>
            This class is used to store and access data that is read from a config.xml
            file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.ImageTargetData">
            <summary>
            Representation of an Image Target node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.MultiTargetPartData">
            <summary>
            Representation of a Multi Target Part node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.MultiTargetData">
            <summary>
            Representation of a Multi Target node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.CylinderTargetData">
            <summary>
            Representation of a Cylinder Target node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.AreaTargetData">
            <summary>
            Representation of an Area Target node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.ModelTargetData">
            <summary>
            Representation of a Model Target node in the config.xml file.
            </summary>
        </member>
        <member name="T:Vuforia.ConfigData.ValidationAreaData">
            <summary>
            Representation of a Validation Area node in the config.xml file.
            </summary>
        </member>
        <member name="P:Vuforia.ConfigData.NumImageTargets">
            <summary>
            Returns the number of Image Targets currently present in the config data.
            </summary>
        </member>
        <member name="P:Vuforia.ConfigData.NumMultiTargets">
            <summary>
            Returns the number of Multi Targets currently present in the config data.
            </summary>
        </member>
        <member name="P:Vuforia.ConfigData.NumCylinderTargets">
            <summary>
            Returns the number of Cylinder Targets currently present in the config data.
            </summary>
        </member>
        <member name="P:Vuforia.ConfigData.NumVuMarkTargets">
            <summary>
            Returns the number of VuMarks currently present in the config data.
            </summary>
        </member>
        <member name="P:Vuforia.ConfigData.NumTrackables">
            <summary>
            Returns the overall number of Trackables currently present in the config data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.#ctor(System.String)">
            <summary>
            Constructor of ConfigData class. Creates initializes internal collections.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.#ctor(Vuforia.ConfigData)">
            <summary>
            Copy constructor of ConfigData class.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetImageTarget(Vuforia.ConfigData.ImageTargetData,System.String)">
            <summary>
            Set attributes of the Image Target with the given name.
            If the Image Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetMultiTarget(Vuforia.ConfigData.MultiTargetData,System.String)">
            <summary>
            Set attributes of the Multi Target with the given name.
            If the Multi Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetCylinderTarget(Vuforia.ConfigData.CylinderTargetData,System.String)">
            <summary>
             Set attributes of the Cylinder Target with the given name.
            If the Cylinder Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetModelTarget(Vuforia.ConfigData.ModelTargetData,System.String)">
            <summary>
            Set attributes of the Model Target with the given name.
            If the Model Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetAreaTarget(Vuforia.ConfigData.AreaTargetData,System.String)">
            <summary>
            Set attributes of the Area Target with the given name.
            If the Area Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetVuMarkTarget(Vuforia.ConfigData.VuMarkData,System.String)">
            <summary>
            Set attributes of the VuMark Target with the given name.
            If the VuMark Target does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.SetValidationArea(Vuforia.ConfigData.ValidationAreaData,System.String)">
            <summary>
            Set attributes of the Validation Area with the given name.
            If the Validation Area does not yet exist it is created automatically.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.AddMultiTargetPart(Vuforia.ConfigData.MultiTargetPartData,System.String)">
            <summary>
            Add Multi Target Part to the Multi Target with the given multiTargetName.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearAll">
            <summary>
            Clear all data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearImageTargets">
            <summary>
            Clear all Image Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearMultiTargets">
            <summary>
            Clear all Multi Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearCylinderTargets">
            <summary>
            Clear all Multi Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearModelTargets">
            <summary>
            Clear all Object Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearAreaTargets">
            <summary>
            Clear all Area Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearValidationAreas">
            <summary>
            Clear all Validation Area data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ClearVuMarkTargets">
            <summary>
            Clear all VuMark Target data.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveImageTarget(System.String)">
            <summary>
            Remove Image Target with the given name.
            Returns false if Image Target does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveMultiTarget(System.String)">
            <summary>
            Remove Multi Target with the given name.
            Returns false if Multi Target does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveCylinderTarget(System.String)">
            <summary>
            Remove Cylinder Target with the given name.
            Returns false if Cylinder Target does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveModelTarget(System.String)">
            <summary>
            Remove Model Target with the given name.
            Returns false if Model Target does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveAreaTarget(System.String)">
            <summary>
            Remove Area Target with the given name.
            Returns false if Area Target does not exist.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.RemoveValidationArea(System.String)">
            <summary>
            Remove Validation Area with the given name.
            Returns false if Validation Area does not exist.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.RemoveVuMarkTarget(System.String)">
            <summary>
            Remove VuMark Target with the given name.
            Returns false if VuMark Target does not exist.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.GetImageTarget(System.String)">
            <summary>
            Creates a new Image Target with the data of the Image Target with the
            given name.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.GetMultiTarget(System.String)">
            <summary>
            Creates a new Multi Target with the data of the Multi Target with the
            given name.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.GetCylinderTarget(System.String)">
            <summary>
            Creates a new Cylinder Target with the data of the Cylinder Target with the
            given name.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.GetModelTarget(System.String)">
            <summary>
            Creates a new Model Target with the data of the Object Target with the
            given name.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.GetAreaTargetData(System.String)">
            <summary>
            Creates a new Area Target with the data of the Area Target with the
            given name.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.GetValidationArea(System.String)">
            <summary>
            Creates a new Validation Area with the data of the Object Target with the
            given name.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.GetVuMarkTarget(System.String)">
            <summary>
            Creates a new VuMark Target with the data of the Object Target with the
            given name.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ImageTargetExists(System.String)">
            <summary>
            Checks if the Image Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.MultiTargetExists(System.String)">
            <summary>
            Checks if the Multi Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CylinderTargetExists(System.String)">
            <summary>
            Checks if the Cylinder Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ModelTargetExists(System.String)">
            <summary>
            Checks if the Model Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.AreaTargetExists(System.String)">
            <summary>
            Checks if the Area Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.ValidationAreaExists(System.String)">
            <summary>
            Checks if the Validation Area with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.VuMarkTargetExists(System.String)">
            <summary>
            Checks if the VuMark Target with the given name is part of the data set.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CopyImageTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all Image Target names into the given string array.
            The index defines at which location to start copying.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.CopyMultiTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all Multi Target names into the given string array.
            The index defines at which location to start copying.
            </summary> 
        </member>
        <member name="M:Vuforia.ConfigData.CopyCylinderTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all Cylinder Target names into the given string array.
            The index defines at which location to start copying.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CopyModelTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all Model Target names into the given string array.
            The index defines at which location to start copying. 
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CopyAreaTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all Area Target names into the given string array.
            The index defines at which location to start copying.
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CopyValidationAreaNames(System.String[],System.Int32)">
            <summary>
            Copy all Validation Area names into the given string array.
            The index defines at which location to start copying. 
            </summary>
        </member>
        <member name="M:Vuforia.ConfigData.CopyVuMarkTargetNames(System.String[],System.Int32)">
            <summary>
            Copy all VuMark Target names into the given string array.
            The index defines at which location to start copying.
            </summary>
        </member>
        <member name="T:Vuforia.CylinderMeshFactory">
            <summary>
            This class creates a mesh for a cylinder, cone, or conical frustum.
            The resulting mesh contains vertex positions, normals, and texture coordinates.
            The resulting mesh contains inward and outward faces and can therefore be viewed double-sided.
            The resulting mesh has one, two, or three submeshes: side geometry, top geometry (optional), bottom geometry (optional)
            </summary>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.CreateCylinderMesh(System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create a mesh for a cylinder, cone, or conical frustum.
            </summary>
            <param name="sideLength">Distance between point on top circle and corresponding point on bottom circle. Height for cylinders, slant height for cones. </param>
            <param name="topDiameter">Top diameter. For an upward cone it is zero. For a cylinder it is equal to the bottom diameter.</param>
            <param name="bottomDiameter">Bottom diameter. For a downward cone it is zero. For a cylinder it is equal to the top diameter. </param>
            <param name="numPerimeterVertices">Tesselation of the mesh is defined by setting the number of vertices per circle.</param>
            <param name="hasTopGeometry">Define if optional top geometry should be generated.</param>
            <param name="hasBottomGeometry">Define if optional bottom geometry should be generated.</param>
            <param name="insideMaterial">material used for the inside of the cylinder mesh</param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.CreateCylinderMesh(UnityEngine.Mesh,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create a mesh for a cylinder, cone, or conical frustum.
            </summary>
            <param name="oldMesh">Existing mesh which can be modified. A new mesh will be created when this one is null.</param>
            <param name="sideLength">Distance between point on top circle and corresponding point on bottom circle. Height for cylinders, slant height for cones. </param>
            <param name="topDiameter">Top diameter. For an upward cone it is zero. For a cylinder it is equal to the bottom diameter.</param>
            <param name="bottomDiameter">Bottom diameter. For a downward cone it is zero. For a cylinder it is equal to the top diameter. </param>
            <param name="numPerimeterVertices">Tesselation of the mesh is defined by setting the number of vertices per circle.</param>
            <param name="hasTopGeometry">Define if optional top geometry should be generated.</param>
            <param name="hasBottomGeometry">Define if optional bottom geometry should be generated.</param>
            <param name="insideMaterial">material used for the inside of the cylinder mesh</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.AddSealingTriangles(System.Collections.Generic.List{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Create a circle for top or bottom geometry. Positions, normals, and texture coordinates are added.
            </summary>
            <param name="perimeterVertices">Vertices of circle, must be parallel to xz-plane</param>
            <param name="isTop">define whether the circle is for the top or for the bottom geometry</param>
            <returns>return face indices</returns>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.CreatePerimeterPositions(System.Single,System.Single,System.Int32)">
            <summary>
            Create positions for a circle at a specific height (y-coordinate).
            Note that the real height (y-coordinate) is used, not the sidelength
            </summary>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.CreatePerimeterUVCoordinates(System.Int32,System.Boolean)">
            <summary>
            Create texture coordinates for top or bottom geometry
            </summary>
        </member>
        <member name="M:Vuforia.CylinderMeshFactory.ConvertToUVCoordinates(System.Single,System.Single)">
            <summary>
            Convert a 3D-position to a texture coordinate for the side geometry.
            </summary>
            <param name="angleInRadians">angle in xz-plane</param>
            <param name="slantedYPos">Slant height (sidelength) of 3D position</param>
            <returns>Texture coordinate within range [0,1]</returns>
        </member>
        <member name="M:Vuforia.VuMarkPreview.CheckForLegacyPreview">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkPreview.ClearLegacyState">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkPreview.UpdateVirtualScale(System.Single)">
            <summary>
            BACKWARDS-COMPATIBILITY
            </summary>
        </member>
        <member name="T:Vuforia.PreviewModelTurnOffBehaviour">
            <summary>
            A utility behaviour to disable rendering of an editor preview model at run time.
            </summary>
        </member>
        <member name="T:Vuforia.DefaultInitializationErrorHandlerInternal">
            <summary>
            A custom handler that registers for Vuforia initialization errors
            </summary>
        </member>
        <member name="M:Vuforia.DefaultInitializationErrorHandlerInternal.OnDestroy">
            <summary>
                When this game object is destroyed, it unregisters itself as event handler
            </summary>
        </member>
        <member name="T:Vuforia.EulaRuntimeUtility">
            <summary>
            This class wraps reading and writing EULA versions from/to Json
            </summary>
        </member>
        <member name="T:Vuforia.Utility.ExtensionMethods.DelegateHelper">
            <summary>
            This class provides extension methods for executing multicast-delegates with exception
            handling. All delegates are executed even if one of them throws an exception.
            </summary>
        </member>
        <member name="M:Vuforia.Utility.ExtensionMethods.WrapperExtensionMethods.ConstructFromVuMesh(UnityEngine.Mesh,Vuforia.VuMesh)">
            <summary>
            Constructs the unity mesh from a VuMesh
            </summary>
            <remarks>
            The unity mesh uses explicitly a 32bit format for indices because a single mesh can contain way more
            indices then the 16bit default value can handle.  
            </remarks>
            <param name="mesh">The unity mesh</param>
            <param name="vuMesh">The vuMesh to create the unity mesh from</param>
        </member>
        <member name="M:Vuforia.RuntimeExtensionMethods.RotateToOrientation(UnityEngine.ScreenOrientation,UnityEngine.ScreenOrientation)">
            <summary>
            Gets the counter clockwise rotation angle based on ScreenOrientation in degrees.
            </summary>
        </member>
        <member name="T:Vuforia.PixelFormatExtensions">
            <summary>
            Conversions and other helper functions for PIXEL_FORMAT enum
            </summary>
        </member>
        <member name="M:Vuforia.NativePlatformHelper.GetMacOSBundlePathFromBundleId(System.String)">
            <summary>
            Only available for macOS, returns the path of the bundle, including filename
            </summary>
        </member>
        <member name="T:Vuforia.PlayModeEditorUtility">
            <summary>
            Singleton implementation for a utility class used in Play mode to access various editor functionalities.
            If no external IPlayModeEditorUtility implementation is registered, an internal null implementation is used
            </summary>
        </member>
        <member name="M:Vuforia.PlayModeEditorUtility.NullPlayModeEditorUtility.IsEULAAccepted">
            <summary>
            If not running in play mode but on device/standalone app, we need to check the config
            to know if the EULA was accepted or not
            </summary>
        </member>
        <member name="T:Vuforia.CesiumTiles.ErrorCode">
            <summary>
            Error code type.
            </summary>
        </member>
        <member name="F:Vuforia.CesiumTiles.ErrorCode.NONE">
            <summary>Indicates no error.</summary>
        </member>
        <member name="F:Vuforia.CesiumTiles.ErrorCode.FILE_LOAD_FAILED">
            <summary>Indicates a failure on open or load.</summary>
        </member>
        <member name="F:Vuforia.CesiumTiles.ErrorCode.INVALID_FORMAT">
            <summary>Indicates unexpected file content.</summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.Create3DTiles(System.IntPtr@,System.String,Vuforia.StorageType,Vuforia.CesiumTiles.ErrorCode@)">
            <summary>
            Create a 3D Tiles handle using the given path to a 3D Tiles archive (*.3dt)
            </summary>
            <remarks>
            Make sure that vuEngineCreate has been successfully called before calling this function.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.Has3DTilesSet(System.IntPtr)">
            <summary>
            Checks if tileset.json is contained in the 3D Tiles archive.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.Get3DTilesSet(System.IntPtr,System.String@)">
            <summary>
            Retrieves content of tileset.json contained in 3D Tiles archive as a null terminated string.
            </summary>
            <remarks>
            The pointer written to \p jsonTextBuffer points to memory managed internally
            by the 3D Tiles handle. Copy the string in case one wants to extend its lifetime beyond
            the one of the 3D Tiles handle.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.Destroy3DTiles(System.IntPtr)">
            <summary>
            Destroy the given 3D Tiles handle.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.CreatePointCloud(System.IntPtr@,System.IntPtr,System.String,Vuforia.CesiumTiles.ErrorCode@)">
            <summary>
            Create a point cloud by loading a pnts file from inside the given 3D Tiles archive using the given entry path.
            </summary>
            <remarks>
            Make sure that vuEngineCreate has been successfully called before calling this function.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.CreatePointCloudFromRawFile(System.IntPtr@,System.String,Vuforia.StorageType,Vuforia.CesiumTiles.ErrorCode@)">
            <summary>
            Create a point cloud by loading a pnts file directly from disk.
            </summary>
            <remarks>
            Make sure that vuEngineCreate has been successfully called before calling this function.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetPointCloudVertexCount(System.IntPtr,System.Int32@)">
            <summary>
            Retrieve the number of vertices of the given point cloud.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetPointCloudAttributeList(System.IntPtr,System.IntPtr@)">
            <summary>
            Retrieve the vertex attribute list of the given point cloud.
            </summary>
            <remarks>
            The pointer written to \p attributes points to memory managed internally
            by the point cloud handle, and therefore becomes invalid if the point cloud handle is destroyed.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.DestroyPointCloud(System.IntPtr)">
            <summary>
            Destroy the given point cloud.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.CreateMesh(System.IntPtr@,System.IntPtr,System.String,Vuforia.CesiumTiles.ErrorCode@)">
            <summary>
            Create a mesh by loading a b3dm file from inside the given 3D Tiles archive using the given entry path.
            </summary>
            <remarks>
            Make sure that vuEngineCreate has been successfully called before calling this function.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.CreateMeshFromRawFile(System.IntPtr@,System.String,Vuforia.StorageType,Vuforia.CesiumTiles.ErrorCode@)">
            <summary>
            Create a mesh by loading a b3dm file directly from disk.
            </summary>
            <remarks>
            Make sure that vuEngineCreate has been successfully called before calling this function.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetMeshVertexCount(System.IntPtr,System.Int32@)">
            <summary>
            Retrieve the number of vertices of the given mesh.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.HasMeshIndices(System.IntPtr)">
            <summary>
            Checks if the given mesh has an index array.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetMeshIndexCount(System.IntPtr,System.Int32@)">
            <summary>
            Retrieve the number of indices of the given mesh, zero if the mesh has no index array.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetMeshIndexType(System.IntPtr,Vuforia.CsAttributeComponentType@)">
            <summary>
            Retrieve the index component type used by the mesh, will fail if the mesh has no index array. 
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.CopyMeshIndexData``1(System.IntPtr,``0[]@,System.Int32)">
            <summary>
            Copy the index array of the given mesh into the given buffer, will fail if the mesh has no index array.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetMeshAttributeList(System.IntPtr,System.IntPtr@)">
            <summary>
            Retrieve the vertex attribute list of the given mesh.
            </summary>
            <remarks>
            The pointer written to \p attributes points to memory managed internally
            by the mesh handle, and therefore becomes invalid if the mesh handle is destroyed.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.DestroyMesh(System.IntPtr)">
            <summary>
            Destroy the given mesh.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeListSize(System.IntPtr,System.Int32@)">
            <summary>
            Get number of elements in a vertex attribute list.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeListElement(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Get an element in a vertex attribute list.
            </summary>
            <remarks>
            The pointer written to \p attribute points to memory managed internally
            by the attribute list handle, and therefore becomes invalid if the attribute list handle becomes invalid.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeListElementByName(System.IntPtr,Vuforia.CsAttributeName,System.IntPtr@)">
            <summary>
            Get an element with a specific attribute name in a vertex attribute list.
            </summary>
            <remarks>
            The pointer written to \p attribute points to memory managed internally
            by the attribute list handle, and therefore becomes invalid if the attribute list handle becomes invalid.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeName(System.IntPtr,System.Int32)">
            <summary>
            Get the name of a vertex attribute.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeComponentType(System.IntPtr,Vuforia.CsAttributeComponentType@)">
            <summary>
            Get the component type of a vertex attribute.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeDataType(System.IntPtr,Vuforia.CsAttributeDataType@)">
            <summary>
            Get the data type of a vertex attribute.
            </summary>
        </member>
        <member name="M:Vuforia.CesiumTiles.GetAttributeData(System.IntPtr,System.IntPtr@)">
            <summary>
            Get a handle to the actual data of a vertex attribute.
            </summary>
            <remarks>
            The pointer written to \p data points to memory managed internally
            by the attribute handle, and therefore becomes invalid if the attribute handle becomes invalid.
            </remarks>
        </member>
        <member name="M:Vuforia.CesiumTiles.CopyAttributeData``1(System.IntPtr,``0[]@,System.Int32)">
            <summary>
            Copy the vertex attribute data into the given buffer, the data will be tightly packed
            </summary>
        </member>
        <member name="T:Vuforia.MeshSetRenderer">
            <summary>
            Takes care of the visibility and rendering of the AreaTarget's Augmentation
            </summary>
        </member>
        <member name="M:Vuforia.MeshSetRenderer.SetActive(System.Boolean)">
            <summary>
            Controls the visibility of the Augmentation of the AreaTarget
            </summary>
            <param name="value">Sets the visibility of the AreaTarget Augmentation</param>
        </member>
        <member name="T:Vuforia.PCShaderSupportUtil">
            <summary>
            Utility class for graphics related functionality.
            </summary>
        </member>
        <member name="M:Vuforia.PCShaderSupportUtil.IsGeometryShaderSupported">
            <summary>
            Tells whether the current platform supports geometry shaders.
            </summary>
            <returns>true if geometry shaders are supported, false otherwise</returns>
        </member>
        <member name="T:Vuforia.Voxel">
            <summary>
            A volume in 3D space (voxel) containing a mesh (points or triangle mesh).
            Each voxel has up to 8 children voxels (octree structure).
            </summary>
        </member>
        <member name="P:Vuforia.Voxel.IsMaxDepthLeafNode">
            <summary>
            Tells whether this voxel is a leaf node in the tree.
            </summary>
        </member>
        <member name="M:Vuforia.Voxel.Init(Vuforia.VoxelTree,UnityEngine.Transform,Vuforia.PCTile,Vuforia.VoxelGameObject)">
            <summary>
            Initializes the voxel.
            </summary>
        </member>
        <member name="T:Vuforia.VoxelTree">
            <summary>
            Base class for Octree-based volumetric scene structures.
            </summary>
        </member>
        <member name="P:Vuforia.VoxelTree.zipHandle">
            <summary>
            Handle to the opened Zip, used in wrapper code
            </summary>
        </member>
        <member name="P:Vuforia.VoxelTree.MaxDepth">
            <summary>
            The maximum depth of the octree.
            </summary>
        </member>
        <member name="M:Vuforia.VoxelTree.CreateVoxel(UnityEngine.GameObject)">
            <summary>
            Creates the Voxel from the given PCTile
            </summary>
        </member>
        <member name="T:Vuforia.MeshSetBehaviour">
            <summary>
            A hierarchical (octree) data structure for voxels containing points.
            Each voxel contains a set of points (a sub-set of the full point cloud).
            Voxel points are loaded from PLY or DRACO (DRC) files stored in a file hierarchy.
            </summary>
        </member>
        <member name="T:Vuforia.MeshSetVoxel">
            <summary>
            A volume in 3D space (voxel) containing a mesh.
            Each voxel has up to 8 children voxels (octree structure).
            </summary>
        </member>
        <member name="T:Vuforia.PointCloudVoxel">
            <summary>
            A volume in 3D space (voxel) containing a set of points.
            Each voxel has up to 8 children voxels (octree structure).
            </summary>
        </member>
        <member name="P:Vuforia.FileIOTask.FileName">
            <summary>
            Properties.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="T:Vuforia.FileIOTask.OnTaskCompleted">
            <summary>
            Events.
            </summary>
        </member>
        <member name="M:Vuforia.FileIOTask.Execute(System.IntPtr)">
            <summary>
            Execute the task.
            </summary>
        </member>
        <member name="T:Vuforia.PointLoadTask">
            <summary>
            A File IO task specialization to load points.
            </summary>
        </member>
        <member name="M:Vuforia.TileSetUtil.LoadJsonFile(System.String,System.String,System.IntPtr@,Vuforia.PCTileSet@,Vuforia.StorageType)">
            <summary>
            Reads and parse a tileSet JSON file into a TileSet object.
            </summary>
        </member>
        <member name="M:Vuforia.TileSetUtil.GetDepth(Vuforia.PCTileSet)">
            <summary>
            Returns the max depth of the tileSet.
            </summary>
        </member>
        <member name="M:Vuforia.TileSetUtil.GetTileDepths(Vuforia.PCTile,System.Int32,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Gets the set of depths for a tile and its children.
            </summary>
        </member>
        <member name="T:Vuforia.CustomNameAttribute">
            <summary>
            Put [CustomName("")] before an attribute to have a different, more readable name for the value
            </summary>
        </member>
        <member name="M:Vuforia.UnityViewportUtilities.ViewportSize(UnityEngine.Camera)">
            <summary>
            Returns the viewport size of a camera in pixels
            </summary>
        </member>
        <member name="M:Vuforia.UnityViewportUtilities.ScreenToImageSpaceCoordinates(UnityEngine.Vector2,UnityEngine.Rect)">
            <summary>
            Converts a coordinate from screen space to image space.
            </summary>
        </member>
        <member name="M:Vuforia.UnityViewportUtilities.ImageToScreenSpaceCoordinates(UnityEngine.Vector2,UnityEngine.Rect)">
            <summary>
            Converts a coordinate from image space to screen space.
            </summary>
        </member>
        <member name="M:Vuforia.WorldOriginUtility.NativeToUnity(Vuforia.Internal.Core.Pose,Vuforia.Internal.Core.Pose)">
            <summary>
            Apply world offset to transform a pose from native space to Unity space 
            </summary>
        </member>
        <member name="M:Vuforia.WorldOriginUtility.UnityToNative(Vuforia.Internal.Core.Pose,Vuforia.Internal.Core.Pose)">
            <summary>
            Apply world offset to transform a pose from Unity space to native space 
            </summary>
        </member>
        <member name="T:Vuforia.AValidatableConfigProperty">
            <summary>
            Validatable property base class. Always inherit from this to create a new validatable property
            </summary>
        </member>
        <member name="T:Vuforia.DefaultConfigValidator">
            <summary>
            For each new property added to the video background configuration that requires validation, add an implementation of
            AValidatableVideoBackgroundConfigProperty specific to the property to the list of validatableProperties. The config will then be validated
            at each point in the code based on the defined rules.
            </summary>
        </member>
        <member name="T:Vuforia.NumDivisionsProperty">
            <summary>
            Checks the num divisions property. If it is smaller than the minimum value it sets the default value.
            </summary>
        </member>
        <member name="T:Vuforia.RequiredShadersProperty">
            <summary>
            Checks the video background shader property. If it is null, a default value is assigned
            </summary>
        </member>
        <member name="T:Vuforia.VideoBackgroundShaderProperty">
            <summary>
            Checks the video background shader property. If it is null, a default value is assigned
            </summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureBehaviour">
            \ingroup AreaTargetCaptureBehaviourGroup 
        </member>
        <member name="T:Vuforia.AreaTargetCaptureBehaviour.GenerationProgressEvent">
            <summary>
            Provides generation progress percent.
            </summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureBehaviour.GenerationRemainingTimeEvent">
            <summary>
            Provides estimated remaining time in seconds.
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.AlignmentDatabasePath">
            <summary>
            Optional path to database containing an Area Target to use for alignment of the generated Area Target Capture.
            </summary>
            <remarks>
            Default value is NULL. If no path is provided, then alignment will not be performed.
            For aligned generation, the generation configuration must also provide the name of the Area Target to be used for
            alignment, i.e. alignmentTargetName. If generation is successful, then the newly generated Area Target will be aligned
            to the alignment target coordinate system.
            </remarks>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.AlignmentTargetName">
            <summary>
            Optional name of the target to use for alignment.
            </summary>
            <remarks>
            Default value is NULL. If no name is provided, then alignment will not be performed.
            For aligned generation, the generation configuration must also provide the path to a valid Area Target database
            that will be used for alignment, i.e. alignmentDatabasePath. If generation is successful, then the newly generated
            Area Target will be aligned to the alignment target coordinate system.
            </remarks>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureBehaviour.OnGenerationProgressUpdated">
            <summary>
            Provides generation progress percent.
            </summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureBehaviour.OnGenerationRemainingTimeUpdated">
            <summary>
            Provides estimated remaining time in seconds.
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.FileName">
            <summary>
            Gets the target name used to Generate the target
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.Status">
            <summary>
            Get status of the capture
            </summary>
            <remarks>
            Always gives a well defined state
            </remarks>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.StatusInfo">
            <summary>
            Get additional status info for the capture
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.GenerationProgress">
            <summary>
            Get progress information of the current generation in the range [0.0f, 1.0f]
            </summary>
            <remarks>
            Note that the capture has to be in status GENERATING or COMPLETED for this call to succeed.
            Otherwise this call will throw an exception
            </remarks>
        </member>
        <member name="P:Vuforia.AreaTargetCaptureBehaviour.RuntimeMeshBehaviour">
            <summary>
            Get the Runtime Mesh Behaviour of the Area Target Capture.
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.GetGenerationTimeEstimate(System.Int32@)">
            <summary>
            Gets the estimated time remaining to complete the current generation in seconds.
            </summary>
            <remarks>
            The capture has to be in status GENERATING or COMPLETED for this call to succeed.
            It may take few seconds after the generation started for the time estimate to become available.
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.StartCapture">
            <summary>
            Creates an Area Target capture and Starts capturing.
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.PauseCapture">
            <summary>
            Pauses the Area Target capture.
            </summary>
            <remarks>
            The capture pauses data acquisition, and switches to status PAUSED.
            Fails if the capture is not in PREPARING or CAPTURING state.
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.ResumeCapture">
            <summary>
            Resumes the Area Target capture.
            </summary>
            <remarks>
            The capture resumes data acquisition, and switches to either PREPARING
            or CAPTURING. Fails if the capture is not in PAUSED state.
            </remarks>>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.StopCapture">
            <summary>
            Stops the Area Target capture.
            </summary>
            <remarks>
            The capture stops data acquisition, and switches to status STOPPED.
            Fails if the capture is not in PREPARING, CAPTURING or PAUSED state.
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.DestroyCapture">
            <summary>
            Destroys the current capture.
            Cannot destroy the capture while it is Generating the target
            </summary>
            <remarks>
            The capture will be cancelled if it is running
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.GenerateTarget">
            <summary>
            Generates the Target using the name retrieved from the TargetName property with current timestamp
            Resulting target name will be in the form of TargetName-yyyyMMdd-HHmmss which can be retrieved
            using the FileName property
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.GenerateTarget(System.String)">
            <summary>
            Generates the target asynchronously. If the generation is successful then the capture is Destroyed.
            The capture switches to GENERATING and generates a target from the captured data.
            When generation successfully completes, the capture switches to the
            STOPPED state. If generation fails, StatusInfo will hold an error status
            that reflects the cause of the error.
            </summary>
            <param name="targetName">Target name for the capture.
            It is required to respect the following restrictions:
            Length: 1 - 64 characters
            Allowed ASCII characters: numerals, literals, dash, underscore</param>
            <remarks>
            A target can only be generated if the capture accumulated sufficient data to switch from the
            PREPARING state to the CAPTURING state.
            </remarks>
            <remarks>
            If target generation fails with ERROR_NO_NETWORK_CONNECTION,
            ERROR_SERVICE_NOT_AVAILABLE or ERROR_CANCELED one may attempt to call this function again
            to successfully generate a target.
            </remarks>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureBehaviour.CancelTargetGeneration">
            <summary>
            Cancels target generation asynchronously.
            If a generation has been canceled successfully, the capture will switch
            to CANCELED state. The latter allows the capture to call generate
            again to successfully generate a target.
            </summary>
            <remarks>
            Will do nothing if the status is not AreaTargetCaptureStatus.GENERATING.
            </remarks>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureCreationError">
            \ingroup AreaTargetCaptureBehaviourGroup 
            <summary>
            Area Target Capture creation error
            </summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.INTERNAL">
            <summary>An internal error occurred while creating the capture</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.AUTOSTART_FAILED">
            <summary>Immediate start of the capture failed</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.FEATURE_NOT_SUPPORTED">
            <summary>Feature is not supported on the current device</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.MULTIPLE_INSTANCES_NOT_SUPPORTED">
            <summary>Multiple captures are not allowed to exist at the same time</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureCreationError.INVALID_DEVICE_POSE_OBSERVER">
            <summary>DevicePose Observer is null or invalid</summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureGenerationError">
            \ingroup AreaTargetCaptureBehaviourGroup 
            <summary>
            Area Target Capture generation error
            </summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INTERNAL">
            <summary>An internal error occurred</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.ENGINE_NOT_RUNNING">
            <summary>Generation failed because Engine is not running</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INVALID_STATUS">
            <summary>Generation is not allowed because the capture is in the wrong status</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INSUFFICIENT_DATA">
            <summary>Generation failed because the capture has not yet created an initial reconstruction of the environment</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.MISSING_AUTHENTICATION">
            <summary>Generation failed because authentication details are missing (user authentication or authentication secret)</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INVALID_OUTPUT_DIRECTORY">
            <summary>Generation failed because the output directory does not exist or can not be written to</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INVALID_TARGET_NAME">
            <summary>Generation failed because the target name does not satisfy requirements</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.AUTHORING_FILES_GENERATION_REQUIRED">
            <summary>Generation failed because authoring files generation is required, but was not enabled</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.DATABASE_GENERATION_REQUIRED">
            <summary>Generation failed because database generation is required, but was not enabled</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.ALIGNMENT_DATABASE_LOAD_ERROR">
            <summary>Generation failed because the alignment database file was not found or an error occurred when reading data from it (potentially unknown or corrupted file)</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.INVALID_ALIGNMENT_TARGET_NAME">
            <summary>Generation failed because the alignment target name is invalid</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureGenerationError.ALIGNMENT_TARGET_NOT_FOUND">
            <summary>Generation failed because the alignment target with the specified name AND matching target type not found in database</summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour">
            <summary>
            This (internal) class serves as an interface for runtime meshes for AreaTargetCapture
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.Awake">
            <summary>
            Called when the script is loaded
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnVuforiaInitialized(Vuforia.VuforiaInitError)">
            <summary>
            Callback when Vuforia is initialized
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnDestroyInternal">
            <summary>
            Called when the script is being destroyed
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.DoDestroyThisWithObserver(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Don't destroy the behaviour if the observer is destroyed
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnCaptureStarted">
            <summary>
            Called when the Area Target Capture has started
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnCaptureStopped">
            <summary>
            Called when the Area Target Capture has stopped
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnCapturePaused">
            <summary>
            Called when the Area Target Capture has paused
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetCaptureRuntimeMeshBehaviour.OnCaptureResumed">
            <summary>
            Called when the Area Target Capture has resumed
            </summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureStatus">
            \ingroup AreaTargetCaptureBehaviourGroup 
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.INITIALIZED">
            <summary>The capture has been created and can be started</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.PREPARING">
            <summary>Reconstruction of the environment is running, not able to generate a target yet</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.CAPTURING">
            <summary>Basic reconstruction is done, generation possible, capturing more data</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.PAUSED">
            <summary>Reconstruction of the environment has been paused</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.STOPPED">
            <summary>Reconstruction of the environment has been stopped</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatus.GENERATING">
            <summary>Target generation from captured data</summary>
        </member>
        <member name="T:Vuforia.AreaTargetCaptureStatusInfo">
            \ingroup AreaTargetCaptureBehaviourGroup 
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.NORMAL">
            <summary>The capture is running normally</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.RELOCALIZING">
            <summary>The capture is relocalizing, the user should move around or return towards a previously mapped area in order to resume normal capturing</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.EXCESSIVE_MOTION">
            <summary>The user is moving too quickly</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.CAPACITY_WARNING">
            <summary>The capture is removing old data to make room for new data and should be stopped soon</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.INTERRUPTED">
            <summary>The capture is unable to add new data, the user should stop the capture</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.SUSPENDED">
            <summary>The capture was paused automatically by Engine, all operations will fail until Engine resumes the capture</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.TRACKING_DATA_GENERATION">
            <summary>The capture is processing the captured data</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.AUTHORING_DATA_GENERATION">
            <summary>The capture is generating the authoring artifacts (3dt, glb)</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.DEVICE_DATABASE_GENERATION">
            <summary>The capture is generating the Vuforia device database (dat, xml)</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.PACKAGE_GENERATION">
            <summary>The capture is generating the package(s)</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_SUCCESS">
            <summary>Generation successful</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_CANCELED">
            <summary>Generation was canceled</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_INTERNAL">
            <summary>Generation failed because an internal error occurred</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_NO_NETWORK_CONNECTION">
            <summary>Generation failed because the device has no network connection</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_SERVICE_NOT_AVAILABLE">
            <summary>Generation failed because the server was not found, is unreachable, or overloaded</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_AUTHORIZATION_FAILED">
            <summary>Generation failed because the credentials are wrong or outdated</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_MISSING_ALIGNMENT_DATA">
            <summary>Generation failed because of a problem during asynchronous loading of the alignment target data</summary>
        </member>
        <member name="F:Vuforia.AreaTargetCaptureStatusInfo.GENERATION_ERROR_ALIGNMENT_FAILED">
            <summary>Generation failed because it was not possible to align the capture with the specified alignment target</summary>
        </member>
        <member name="T:Vuforia.ARFoundation.ARFoundationImage">
            <summary>
            Data container for camera Image captured from AR Foundation
            </summary>
        </member>
        <member name="T:Vuforia.ARFoundation.IARFoundationFacade">
            <summary>
            Provides access to AR Foundation functionality
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.IsARFoundationScene">
            <summary>
            Returns true if AR Session object exists in the scene.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.CheckAvailability">
            <summary>
            Queries AR Session for availability.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.Init">
            <summary>
            Performs steps required to make Vuforia work with AR Foundations.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.Deinit">
            <summary>
            Performs clean up.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.WaitForCameraReady">
            <summary>
            Waits until AR Foundation camera subsystem is working and ready to track.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.IsARFoundationReady">
            <summary>
            Queries AR Session for state.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.GetCameraTransform">
            <summary>
            Gets the transform of AR Pose Driver object.
            Device pose is applied to that object by AR Foundation.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.GetProfiles">
            <summary>
            Queries AR Camera Manager for available camera profiles.
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.SelectProfile(Vuforia.DriverCameraMode)">
            <summary>
            Selects the requested camera profiles.
            </summary>
            <param name="profile">Must be a profile from the available camera profiles</param>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.AddAnchor(UnityEngine.Pose)">
            <summary>
            Performs create anchor on AR Foundation anchor manager
            </summary>
            <param name="pose">Pose in Unity space</param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.RemoveAnchor(System.String)">
            <summary>
            Performs remove on AR Foundation anchor manager
            </summary>
            <param name="uuid">Anchor to remove. Currently TrackableId of the anchor</param>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.ClearAnchors">
            <summary>
            Removes the anchors created by Vuforia
            </summary>
        </member>
        <member name="M:Vuforia.ARFoundation.IARFoundationFacade.HitTest(UnityEngine.Vector2,System.Collections.Generic.List{UnityEngine.Pose}@)">
            <summary>
            Casts a ray from screen point to AR Foundation planes
            </summary>
            <returns>True if ray hits something</returns>
        </member>
        <member name="T:Vuforia.IlluminationData">
            \ingroup WorldGroup 
            <summary>
            Provides realtime data of real-world illumination calculations by ARKit,
            when used by Vuforia Fusion
            </summary>
        </member>
        <member name="P:Vuforia.IlluminationData.AmbientIntensity">
            <summary>
            The current ambient intensity for the scene measured in Lumens. The value
            may not be available on all platforms. When the value is unavailable
            NULL will be returned.
            
            This value will be valid when ARKit is being used by Vuforia Fusion.
            </summary>
        </member>
        <member name="P:Vuforia.IlluminationData.AmbientColorTemperature">
            <summary>
            The current color temperature for the scene measured in Kelvin. The value
            may not be available on all platforms. When the value is unavailable
            NULL will be returned.
            
            This value will be valid when ARKit is being used by Vuforia Fusion.
            
            </summary>
        </member>
        <member name="P:Vuforia.IlluminationData.IntensityCorrection">
             <summary>
             Returns a floating point intensity value which can be applied to a
             shader when rendering the color for an augmentation to reflect the
             ambient light in the scene.
            
             Intensity correction usage is described here,
             https://library.vuforia.com/content/vuforia-library/en/articles/Solution/using-vuforia-fusion-illumination.html
            
             Intensity correction is a value that can be applied directly to a shader. Values
             are in the range (0.0, 1.0), zero is black and 1.0 is white.
            
             If rendering in gamma space divide by 0.466 (middle grey in gamma) and multiply
             by the final rendered color.
            
             In a linear space use pow(intensityCorrection, 2.2)/0.18
             pow(intensityCorrection, 2.2) converts to linear space and then the value is
             normalized by dividing by 0.18 middle grey in linear space.
            
             The value will always be valid for use. 0.466 (middle grey) is used in cases where
             the platform does not supply a value.
             </summary>
        </member>
        <member name="P:Vuforia.IlluminationData.ColorCorrection">
             <summary>
             \returns a Vec4F which contains RGBA color correction
             values which can be applied to a shader when rendering the color for an
             augmentation to reflect the ambient light in the scene.
            
             Color correction usage is described here,
             https://library.vuforia.com/content/vuforia-library/en/articles/Solution/using-vuforia-fusion-illumination.html
            
             All values are reported in gamma space where gamma is 2.2.
             When used in a gamma space component wise multiply the values with the final
             calculated color.
            
             In a linear color space convert to linear using pow(colorCorrection[i], 2.2) and
             then component wise multiply the values with the final calculated color component.
            
             The values will always be valid for use. 1.0 is used in cases where
             the platform does not supply values.
            
             This value will differ from the default when ARCore is being used by Vuforia Fusion.
             </summary>
        </member>
        <member name="T:Vuforia.VuforiaApplication">
            \ingroup VuforiaApplicationGroup
            <summary>
            The VuforiaApplication class provides a way to initialize and deinitialize
            Vuforia as well register to lifecycle events
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaApplication.IsInitialized">
            <summary>
                Returns true if the Vuforia Engine was successfully initialized
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaApplication.IsRunning">
            <summary>
                Returns true if the Vuforia Engine has been started and is currently running
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaApplication.GetVuforiaBehaviour">
            <summary>
            The VuforiaBehaviour is used to control Vuforia at runtime, per scene
            Returns null if there is no VuforiaBehaviour in the scene
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vuforia.VuforiaApplication.Initialize">
            <summary>
                Initialize Vuforia. Used when "delayed initialization" has been selected in the VuforiaConfiguration, otherwise
                this happens automatically
                While running in the Unity Editor, it takes couple frames to initialize.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaApplication.Initialize(Vuforia.FusionProviderOption)">
            <summary>
            Initialize Vuforia while specifying a configuration for the Fusion Provider.
            Used when "delayed initialization" has been selected in the VuforiaConfiguration.
            </summary>
            <param name="fusionProviderOption">The Fusion Provider configuration.</param>
        </member>
        <member name="M:Vuforia.VuforiaApplication.Initialize(System.String,System.IntPtr)">
            <summary>
            Initialize Vuforia while setting up the name of the library that is loaded dynamically and
             used as an external source of camera or other input data.
             The library must support the Vuforia Driver API and it must be placed
             inside the app package to be loaded properly.
             The exact path depends on the platform:
             - Android: [apk-root-dir]/lib/[architecture]/library.so
             - UWP: [appx-root-dir]/library.dll
             - iOS: [appx-root-dir]/Frameworks/library.framework
            
             Vuforia will try to initialize and use the functionality provided by the Driver.
            
             To disable the Vuforia Driver functionality the following must be done:
             - Call VuforiaApplication.Instance.Deinit()
             - Call VuforiaApplication.Instance.Initialize()
            </summary>
            <remarks>This functionality is currently only supported on Editor, Android, iOS and UWP platforms.</remarks>
            <param name="driverName">Full file name of the Driver library. Setting
            this to null or empty string, will disable the use of the Driver functionality. </param>
            <param name="userData">Optional user defined data to be passed into the library
            when it gets loaded. Vuforia only forwards the data and doesn't process it in any way.
            This value can be accessed at any time throughout the Vuforia lifecycle, so it MUST be valid until
            Vuforia is de-initialized. Set to IntPtr.Zero if not needed.</param>
        </member>
        <member name="M:Vuforia.VuforiaApplication.Deinit">
            <summary>
            Deinitialize Vuforia Engine
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaApplication.SetHint(System.Int32,System.Boolean)">
            <summary>
            Advanced option to set an internal hint code before initialization
            </summary>
            <param name="hint"></param>
            <param name="value"></param>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnBeforeVuforiaInitialized">
            <summary>
            Use this callback for configuring tasks before initializing Vuforia Engine.
            The callback is triggered before Vuforia Engine is initialized, provided that Delayed Initialization is enabled,
            or before performing an initialization after a deinitialization of Vuforia Engine.
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaInitialized">
            <summary>
            Triggered when Vuforia Engine has initialized
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaStarted">
            <summary>
            Triggered after Vuforia has started delivering frame updates
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaError">
            <summary>
            Triggered when a lifecycle-related engine error occurs after initialization
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaPaused">
            <summary>
            Triggered when Vuforia is paused
            True when Vuforia was paused
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaStopped">
            <summary>
            Triggered when Vuforia has been stopped
            </summary>
        </member>
        <member name="E:Vuforia.VuforiaApplication.OnVuforiaDeinitialized">
            <summary>
            Triggered when Vuforia has been deinitialized
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaApplication.GetVuforiaLibraryVersion">
            <summary>
            Returns the version of the Vuforia SDK
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaApplication.IsEulaAccepted">
            <summary>
            Checks the EULA agreement
            </summary>
            <returns>true if EULA have been accepted, false otherwise</returns>
        </member>
        <member name="T:Vuforia.VuforiaEngineError">
            \ingroup VuforiaApplicationGroup 
            <summary>
            VuforiaEngineError is an error value that Vuforia reports 
            when a lifecycle-related engine error occurs after initialization
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaEngineError.INVALID_LICENSE">
            <summary>
            License key validation has failed
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaEngineError.CAMERA_DEVICE_LOST">
            <summary>
            The operating system has reported that the camera device has become unavailable to Vuforia.
            This may be because of a device error or another App or user action has caused the
            operating system to close Engine's connection to the camera.
            </summary>
        </member>
        <member name="T:Vuforia.VuforiaInitError">
            \ingroup VuforiaApplicationGroup 
            <summary>
            VuforiaInitError is an error value that is returned by Vuforia if something goes
            wrong at initialization.
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.DEVICE_NOT_SUPPORTED">
            <summary>The device is not supported</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.PERMISSION_ERROR">
            <summary>One or more permissions required by Vuforia Engine are missing or not granted by user</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_ERROR">
            <summary>A valid license configuration is required</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.INITIALIZATION">
            <summary>An error occurred during initialization of the Vuforia Engine instance (e.g. an instance already exists)</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.DRIVER_CONFIG_LIBRARY_NOT_FOUND">
            <summary>Specified library file not found</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.DRIVER_CONFIG_LOAD_ERROR">
            <summary>An error occurred while loading the driver</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.DRIVER_CONFIG_FEATURE_NOT_SUPPORTED">
            <summary>Vuforia Driver is not supported by the current license</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_MISSING_KEY">
            <summary>License key is missing</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_INVALID_KEY">
            <summary>Invalid license key passed to SDK</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_NO_NETWORK_PERMANENT">
            <summary>Unable to verify license key due to network (Permanent error)</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_NO_NETWORK_TRANSIENT">
            <summary>Unable to verify license key due to network (Transient error)</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_BAD_REQUEST">
            <summary>Malformed request sent to license server. Please ensure your app has valid name and version fields</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_KEY_CANCELED">
            <summary>Provided key is no longer valid</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_PRODUCT_TYPE_MISMATCH">
            <summary>Provided key is not valid for current product</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.LICENSE_CONFIG_UNKNOWN">
            <summary>Unknown error</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.PLATFORM_ANDROID_CONFIG_INITIALIZATION_ERROR">
            <summary>
            An error occurred during initialization of the platform. Note that these errors
             are generated only when the Engine is used on an Android device.
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.PLATFORM_ANDROID_CONFIG_INVALID_ACTIVITY">
            <summary>Invalid Android Activity jobject passed to the configuration</summary>
        </member>
        <member name="F:Vuforia.VuforiaInitError.PLATFORM_ANDROID_CONFIG_INVALID_JAVA_VM">
            <summary>Invalid Java VM (JavaVM*) passed to the configuration</summary>
        </member>
        <member name="T:Vuforia.VuforiaBehaviour">
            \ingroup VuforiaApplicationGroup
            <summary>
            The central Vuforia class. Allows to start and stop the engine and provides access to the current state and
            physical camera among other things.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.WorldCenterMode">
            <summary>
            The world center mode
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.WorldCenter">
            <summary>
            The ObserverBehaviour which, when tracked, is the world center. Requires WorldCenterMode to be set to "SPECIFIC_TARGET"
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.Instance">
            <summary>
            A simple static singleton getter to the VuforiaBehaviour (if present in the scene)
            Will return null if no VuforiaBehaviour has been instantiated in the scene.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.CameraDevice">
            <summary>
            Represents the physical camera
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.ObserverFactory">
            <summary>
            ObserverFactory to create Vuforia target behaviours
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.DevicePoseBehaviour">
            <summary>
            Returns the DevicePoseBehaviour which represents the device, such as a phone or a digital eyewear device, of which a position is tracked.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.SessionRecorder">
            <summary>
            The session recorder allows the user to record Vuforia sessions for playback in the editor
            and on a device. Returns null if Vuforia has not yet been initialized
            </summary>
            <returns>
            Returns null is Vuforia is not initialized.
            </returns>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.VideoBackground">
            <summary>
            The renderer which provides access to features of the video background
            </summary>
            <returns>
            Returns null is Vuforia is not initialized.
            </returns>
        </member>
        <member name="P:Vuforia.VuforiaBehaviour.World">
            <summary>
            A representation of the physical world. Provides access to the current state and offers functionality to perform
            hit tests and create anchors
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.ClearAreaTargetObserverCloudCache">
            <summary>
            Remove all data cached by Area Target observers
            </summary>
            Use this function to decrease the disk space usage by removing all Cloud Area Target data cached by
            Area Target observers. If there is any Area Target observer in the given engine instance this function
            will fail.
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.ClearModelTargetDetectionCache">
             <summary>
             Remove all detection data cached by Model Target observers
            
             Use this function to decrease the disk space usage by removing all detection data cached by Model Target
             observers. If there is any Model Target observer in the given Vuforia Engine instance this function will
             fail.
             </summary>
             <remarks>
             Note that clearing the cache may take a significant amount of time, it is therefore recommended that this
             method is not called on the main/UI thread.
             </remarks>
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.SetMaximumSimultaneousTrackedImages(System.Int32)">
            <summary>
            Set the maximum number of image-based Targets tracked at the same time.
            </summary>
            <remarks>
            This setting controls Image Targets, Cylinder Targets, Multi-Targets and VuMarks.
            The default value is 1.
            </remarks>
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.SetModelTargetRecoWhileExtendedTracked(System.Boolean)">
            <summary>
            Turn on the recognition engine for an Advanced (360) Model Target database while extended-tracking a model.
            </summary>
            <remarks>
            This can only be set when Vuforia is not running. The default value is true.
            </remarks>
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.GetDatabaseTargetInfo(System.String,Vuforia.DatabaseTargetInfoError@)">
            <summary>
            Extract info on all targets from a database from which observers can be created.
            </summary>
            <param name="databasePath">The path to the XML or DAT file of the database.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="error">Error encountered while retrieving the Target info in the database.</param>
            <returns>Info on the Targets contained in the Database.</returns>
        </member>
        <member name="M:Vuforia.VuforiaBehaviour.SetWorldCenter(Vuforia.WorldCenterMode,Vuforia.ObserverBehaviour)">
            <summary>
            Set the world center mode at runtime.
            </summary>
            <param name="wcm">World center mode</param>
            <param name="observerBehaviour">Behaviour to be used as world center in SPECIFIC_TARGET mode</param>
        </member>
        <member name="T:Vuforia.VuforiaConfiguration">
            \ingroup VuforiaApplicationGroup 
            <summary>
            Global settings for Vuforia which are used for all scenes
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.LicenseKey">
            <summary>
            The license key can only be changed before the first scene is loaded,
            e.g. with the RuntimeInitializeOnLoadMethod-attribute
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.ufoLicenseKey">
            <summary>
            Encoded ufo license key.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.DelayedInitialization">
            <summary>
            If delayed initialization is enabled, the developer has to initialize Vuforia
            manually with <see cref="!:VuforiaRuntime.InitVuforia"/>.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.CameraFocusMode">
            <summary>
            The mode used for camera focus.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.CameraDeviceMode">
            <summary>
            The mode used for camera capturing and video rendering.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.MaxSimultaneousImageTargets">
            <summary>
            How many targets to detect and track at the same time
            </summary>
            This setting affects image, cylinder and multi targets
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.previousVirtualSceneScaleFactor">
            <summary>
            Used to keep track of the changes made to scale value
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.VirtualSceneScaleFactor">
            <summary>
            This factor configures how many Unity scene units correspond 
            to one meter in the physical world. Poses reported by Vuforia will be transformed 
            accordingly. Scene content will not be scaled. Note that on HoloLens and 
            MagicLeap, a factor other than 1.0 is not supported.
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.modelTargetRecoWhileExtendedTracked">
            <summary>
            When enabled, Vuforia Engine will continue to search for new Advanced Model Targets
            even after detecting one.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.ContinuousModelTargetSearch">
            <summary>
            When enabled, Vuforia engine will continue to search for new advanced model targets, even after detecting one.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.ShareRecordingsInITunes">
            <summary>
            Whether to use the iOS functionality to share session recordings that were
            created using the SessionRecorder
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.LogLevel">
            <summary>
            The LogLevel for logging. Default value is LogLevel.ALL
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.Version">
            <summary>
            Version of the Vuforia Unity Extension
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.EULAAcceptedVersions">
            <summary>
            Version of the Vuforia Unity Extension
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DatabaseConfiguration.DisableModelExtraction">
            <summary>
            Disables the creation of a model target mesh from a database and the subsequent
            copying to the Resources folder
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.NumDivisions">
            <summary>
            The number of divisions of the video background mesh. Use this for a finer tessellation of the video background mesh
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.VideoBackgroundShader">
            <summary>
            The shader used to render the video background
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.VideoBackgroundEnabled">
            <summary>
            Enable or disable rendering the video background
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ARCoreRequirement.DONT_USE">
            <summary>
            ARCore will not be used
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ARCoreRequirement.OPTIONAL">
            <summary>
            ARCore will be used if the device has ARCore installed
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ARCoreRequirement.REQUIRED">
            <summary>
            ARCore is required on the device for the app to run
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.AutoInitAndStartTracker">
            <summary>
            Whether the tracker is automatically initialized and started
            in a new scene
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ARCoreRequirementSetting">
            <summary>
            Controls ARCore support setting in the Android Manifest of the app, see:
            https://developers.google.com/ar/develop/java/enable-arcore
            </summary>
        </member>
        <member name="F:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.autoImportArcore">
            Controls the load of ARCore so that Developers don't have to do it manually
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.AutoImportArcoreSetting">
            <summary>
            Whether or not to automatically include the ARCore library in the application
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.UseThirdPartySeethroughEyewear">
            <summary>
            Sets up Vuforia to allow additional, not officially supported Eyewear devices. Setting this option will disable video background rendering
            and will suppress device pose updates. Pose updates must be performed by the application instead.
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.PlayModeConfiguration.RecordingPath">
            <summary>
            The path of the session recording to be played back
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.PlayModeConfiguration.PlayModeType">
            <summary>
            Specify the PlayModeType for entering Unity's Play Mode
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.WebCamConfiguration.DeviceNameSetInEditor">
            <summary>
            The name of the web cam device to use in PlayMode
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.WebCamConfiguration.RenderTextureLayer">
            <summary>
            The layer that is used for rendering the webcam image in Play Mode. Change this layer
            if you're using the same layer for other rendering in your project
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.Instance">
            <summary>
            Get singleton-instance at runtime
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.Vuforia">
            <summary>
            Configuration for general Vuforia settings
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.Database">
            <summary>
            Configuration for settings related to databases
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.VideoBackground">
            <summary>
            Configuration for settings related to the video background
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.DeviceTracker">
            <summary>
            Configuration for settings related to device tracking
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.WebCam">
            <summary>
            Configuration for settings related to webcam
            </summary>
        </member>
        <member name="P:Vuforia.VuforiaConfiguration.PlayMode">
            <summary>
            Configuration for settings regarding VuforiaBehavior in Unity Play Mode
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaConfiguration.Create">
            <summary>
            Create a new instance of the Vuforia configuration.
            This can be used at runtime or in editor when no configuration file is available yet
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaConfiguration.LoadOrCreateVuforiaConfiguration">
            <summary>
            Loads the VuforiaConfiguration from the serialized file in the Resources folder.
            If the file does not exist, it creates a new one.
            </summary>
        </member>
        <member name="F:Vuforia.PlayModeType.WEBCAM">
            <summary>
            Use the webcam when entering Play Mode
            </summary>
        </member>
        <member name="F:Vuforia.PlayModeType.SIMULATOR">
            <summary>
            Start Vuforia Simulator Mode when entering Play Mode
            </summary>
        </member>
        <member name="F:Vuforia.PlayModeType.RECORDING">
            <summary>
            Play back a session recording when entering Play Mode
            </summary>
        </member>
        <member name="T:Vuforia.VuforiaMonoBehaviour">
            <summary>
            This is the base class for all MonoBehaviours that are used in Vuforia.
            If no Behaviours of this type are found in a scene, the VuforiaBehaviour will not be
            automatically attached at runtime. This means no VideoBackground is rendered.
            </summary>
        </member>
        <member name="T:Vuforia.World">
            \ingroup WorldGroup 
            <summary>
            Provides functions to perform hit tests and create anchors in the world
            </summary>
        </member>
        <member name="E:Vuforia.World.OnStateUpdated">
            <summary>
            Updated whenever a new state of the world has been processed
            </summary>
        </member>
        <member name="E:Vuforia.World.OnObserverCreated">
            <summary>
            Called whenever an observer is newly discovered by Vuforia. This can happen with VuMarks, CloudReco, Anchors or Barcodes
            </summary>
        </member>
        <member name="E:Vuforia.World.OnObserverDestroyed">
            <summary>
            Called whenever an observer tracked by Vuforia is lost. This can happen with VuMarks, CloudReco, Anchors or Barcodes
            </summary>
        </member>
        <member name="P:Vuforia.World.IlluminationData">
            <summary>
            Provides data on the estimated illumination values in the current frame
            such as illumination intensity or ambient light color temperature
            </summary>
        </member>
        <member name="P:Vuforia.World.AnchorsSupported">
            <summary>
            Returns true if anchors and hit test are supported
            </summary>
        </member>
        <member name="M:Vuforia.World.HitTest(UnityEngine.Vector2,System.Single,Vuforia.HitTestResult@)">
            <summary>
            Perform a hit test in the world. The result is always of the first plane that is intersected with
            </summary>
            <param name="imageSpacePos">The 2d position of the hit test in image space</param>
            <param name="defaultHeight">The assumed height of the device whe performing the hit test is usually 1.4m</param>
            <param name="hitTestResult">Result of the hit test. If an intersection with a plane was detected, it's reflected here'</param>
            <returns>True if there is a hit test result</returns>
        </member>
        <member name="M:Vuforia.World.GetObserverBehaviours">
            <summary>
            Get all the ObserverBehaviours currently in the scene
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vuforia.World.GetObserverBehaviours``1">
            <summary>
            Get all the ObserverBehaviours of type T currently in the scene
            </summary>
            <typeparam name="T">Type of the ObserverBehaviour</typeparam>
            <returns></returns>
        </member>
        <member name="M:Vuforia.World.GetTrackedObserverBehaviours">
            <summary>
            Get all the ObserverBehaviours in the scene that are currently tracked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vuforia.World.GetTrackedObserverBehaviours``1">
            <summary>
            Get all the ObserverBehaviours of type T in the scene that are currently tracked
            </summary>
            <typeparam name="T">Type of the ObserverBehaviour</typeparam>
            <returns></returns>
        </member>
        <member name="T:Vuforia.WorldCenterMode">
            \ingroup VuforiaApplicationGroup
            <summary>
            The world center mode defines how the relative coordinates between
            Trackables and camera are translated into Unity world coordinates.
            If a world center is present the virtual camera in the Unity scene is
            transformed with respect to that.
            The world center mode is set through the Unity inspector.
            </summary>
        </member>
        <member name="F:Vuforia.WorldCenterMode.SPECIFIC_TARGET">
            <summary>
            User defines a single Trackable that defines the world center.
            </summary>
        </member>
        <member name="F:Vuforia.WorldCenterMode.FIRST_TARGET">
            <summary>
            Tracker uses the first Trackable that comes into view as the world
            center (world center changes during runtime).
            </summary>
        </member>
        <member name="F:Vuforia.WorldCenterMode.DEVICE">
            <summary>
            The device/camera is considered the world center, trackables are positioned with respect to it.
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice">
            \ingroup CameraDeviceGroup
            <summary>
                Represents the physical camera used to capture the real world
            </summary>
            <remarks>
                Most functionality is not accessible until Vuforia has initialized completely. This can be checked by a call
                to VuforiaBehaviour.Instance.IsInitialized
            </remarks>
        </member>
        <member name="P:Vuforia.CameraDevice.HoloLens">
            <summary>
                Hololens specific camera functionality
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.WebCam">
            <summary>
                Webcam specific functionality
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.IsActive">
            <summary>
                Returns whether the camera is currently capturing
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.CameraMode">
            <summary>
                Get the current camera mode which which preferences either quality or speed
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.Flash">
            <summary>
                Get camera device flash state
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.FocusMode">
            <summary>
                Get the current focus mode of the camera, e.g. manual or automatic
                Must be called after Engine has been started
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.ExposureMode">
            <summary>
                Get the current exposure mode of the camera, e.g. automatic or continuous
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.FocusRegionSupported">
            <summary>
                Check if setting a focus region is supported on the current device
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.ExposureRegionSupported">
            <summary>
                Check if setting an exposure region is supported on the current device
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetRecommendedFPS">
            <summary>
                Returns the current framerate of the camera, which is what's recommended
                as the framerate cap of the application in most cases
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetCameraFieldOfViewRads">
            <summary>
                Get the field of view for the active camera.
                This is a Vector2 containing the x- and y- components of the FOV in radians.
                If the value cannot be obtained for some reason, then Vector2.zero will be returned
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetVideoMode">
            <summary>
                Get the video mode data that matches the selected CameraMode.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetVideoMode(Vuforia.CameraMode)">
            <summary>
                Get the video mode data that matches the given CameraMode.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetCameraMode(Vuforia.CameraMode)">
            <summary>
                Set the current camera mode which which preferences either quality or speed
                This can only be called before starting Vuforia, otherwise returns false
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFlash(System.Boolean)">
            <summary>
                Activate or deactivate the camera device flash.
                Returns false if flash is not available or can't be activated.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFocusMode(Vuforia.FocusMode)">
            <summary>
                Set the active focus mode. Returns false if this mode is not available or can't be activated.
            </summary>
            <param name="focusMode">The mode of the setting</param>
        </member>
        <member name="M:Vuforia.CameraDevice.SetExposureMode(Vuforia.ExposureMode)">
            <summary>
                Set the active exposure mode. Returns false if this mode is not available or can't be activated.
            </summary>
            <param name="exposureMode">The mode of the setting</param>
        </member>
        <member name="M:Vuforia.CameraDevice.IsFocusModeSupported(Vuforia.FocusMode)">
            <summary>
                Check if setting a specific focus mode is supported on the current device
            </summary>
            <param name="focusMode">The focus mode to be checked for support</param>
        </member>
        <member name="M:Vuforia.CameraDevice.IsExposureModeSupported(Vuforia.ExposureMode)">
            <summary>
                Check if setting a specific exposure mode is supported on the current device
            </summary>
            <param name="exposureMode">The exposure mode to be checked for support</param>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFocusRegion(Vuforia.CameraRegionOfInterest)">
            <summary>
                Set the active region of interest for auto-focus
            </summary>
            <param name="regionOfInterest">The region of interest to be set for focus</param>
        </member>
        <member name="M:Vuforia.CameraDevice.GetFocusRegion">
            <summary>
                Get the region of interest currently active for auto-focus
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetExposureRegion(Vuforia.CameraRegionOfInterest)">
            <summary>
                Set the active region of interest for auto-exposure
            </summary>
            <param name="regionOfInterest">The region of interest to be set for exposure</param>
        </member>
        <member name="M:Vuforia.CameraDevice.GetExposureRegion">
            <summary>
                Get the region of interest currently active for auto-exposure
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.SetFrameFormat(Vuforia.PixelFormat,System.Boolean)">
            <summary>
                Enables or disables the request of the camera image in the desired pixel
                format. Returns true on success, false otherwise. Note that this may
                result in processing overhead. Image is accessed using GetCameraImage.
                Note that there may be a delay of several frames until the camera image
                becomes available.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetCameraImage(Vuforia.PixelFormat)">
            <summary>
                Returns a camera image from the current Vuforia State for the requested format.
                Returns null if this image is not available. You must call SetFrameFormat before
                accessing the corresponding camera image.
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.GetCameraIntrinsics">
            <summary>
             Returns the camera intrinsics from the current Vuforia State. 
            </summary>
            <returns>The camera intrinsics</returns>
        </member>
        <member name="M:Vuforia.CameraDevice.GetVideoBackgroundRectInViewPort">
            <summary>
                The area in the viewport that is covered by the video background.
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.HoloLensDevice">
            <summary>
                HoloLens specific camera functionality
            </summary>
        </member>
        <member name="M:Vuforia.CameraDevice.HoloLensDevice.SetFocusPoint(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Sets the focus point, stablizing holograms in that area
            </summary>
        </member>
        <member name="T:Vuforia.CameraDevice.WebCamDevice">
            <summary>
                WebCam specific camera functionality
            </summary>
        </member>
        <member name="P:Vuforia.CameraDevice.WebCamDevice.IsPlaying">
            <summary>
                Is the web cam currently capturing video
            </summary>
        </member>
        <member name="T:Vuforia.CameraMode">
            \ingroup CameraDeviceGroup
            <summary>
            The mode used for camera capturing and video rendering.
            The camera device mode is set through the Unity inspector.
            </summary>
        </member>
        <member name="F:Vuforia.CameraMode.MODE_DEFAULT">
            <summary>Best compromise between speed and quality.</summary>
        </member>
        <member name="F:Vuforia.CameraMode.MODE_OPTIMIZE_SPEED">
            <summary>Optimize for speed. Quality of the video background could suffer.</summary>
        </member>
        <member name="F:Vuforia.CameraMode.MODE_OPTIMIZE_QUALITY">
            <summary>Optimize for quality. Application performance could go down.</summary>
        </member>
        <member name="T:Vuforia.CameraRegionOfInterest">
            <summary>
            Data structure for setting and getting focus and exposure regions of interest in the camera image
            </summary>
        </member>
        <member name="F:Vuforia.CameraRegionOfInterest.ScreenPosition">
            <summary>
            Point in the screen coordinates to use as the center of the region
            </summary>
        </member>
        <member name="F:Vuforia.CameraRegionOfInterest.Extent">
            <summary>
            Extent of the region as a percentage of the camera frame width and height
            </summary>
        </member>
        <member name="T:Vuforia.ExposureMode">
            <summary>
            The different exposure modes for the active camera
            </summary>
        </member>
        <member name="F:Vuforia.ExposureMode.EXPOSURE_MODE_TRIGGERAUTO">
            <summary>Triggers a single auto-exposure operation</summary>
        </member>
        <member name="F:Vuforia.ExposureMode.EXPOSURE_MODE_CONTINUOUSAUTO">
            <summary>Continuous auto-exposure mode</summary>
        </member>
        <member name="F:Vuforia.ExposureMode.EXPOSURE_MODE_FIXED">
            <summary>Fixed exposure mode</summary>
        </member>
        <member name="T:Vuforia.FocusMode">
            \ingroup CameraDeviceGroup
            <summary>
            The different focus modes for the active camera
            </summary>
        </member>
        <member name="F:Vuforia.FocusMode.FOCUS_MODE_TRIGGERAUTO">
            <summary>Triggers a single autofocus operation</summary>
        </member>
        <member name="F:Vuforia.FocusMode.FOCUS_MODE_CONTINUOUSAUTO">
            <summary>Continuous autofocus mode</summary>
        </member>
        <member name="F:Vuforia.FocusMode.FOCUS_MODE_INFINITY">
            <summary>Focus set to infinity</summary>
        </member>
        <member name="F:Vuforia.FocusMode.FOCUS_MODE_MACRO">
            <summary>Macro mode for close-up focus</summary>
        </member>
        <member name="F:Vuforia.FocusMode.FOCUS_MODE_FIXED">
            <summary>Fixed focus mode</summary>
        </member>
        <member name="T:Vuforia.VideoModeData">
            \ingroup VideoBackgroundGroup
            <summary>
            This struct stores video mode data. This includes the width and height of
            the frame and the framerate of the camera.
            </summary>
        </member>
        <member name="F:Vuforia.VideoModeData.width">
            <summary>
            Width of the frame
            </summary>
        </member>
        <member name="F:Vuforia.VideoModeData.height">
            <summary>
            Height of the frame
            </summary>
        </member>
        <member name="F:Vuforia.VideoModeData.frameRate">
            <summary>
            Framerate of the video
            </summary>
        </member>
        <member name="F:Vuforia.VideoModeData.format">
            <summary>
            The image format
            </summary>
        </member>
        <member name="T:Vuforia.DriverCameraMode">
            <summary>
            Describes the size, frame rate and format of a camera frame for the driver.
            </summary>
        </member>
        <member name="F:Vuforia.DriverCameraMode.Width">
            <summary>
            Width of the camera frame
            </summary>
        </member>
        <member name="F:Vuforia.DriverCameraMode.Height">
            <summary>
            Height of the camera frame
            </summary>
        </member>
        <member name="F:Vuforia.DriverCameraMode.Fps">
            <summary>
            Frame rate of the video
            </summary>
        </member>
        <member name="F:Vuforia.DriverCameraMode.Format">
            <summary>
            Image pixel format
            </summary>
        </member>
        <member name="T:Vuforia.DriverPixelFormat">
            <summary>
            A list of the supported pixel formats by the driver for camera frames.
            </summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.UNKNOWN">
            <summary>Unknown format.</summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.YUYV">
            <summary>YUV 4:2:2. Single 16bit interleaved plane. Same as YUY2.</summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.NV12">
            <summary>YUV 4:2:0. 8bit Y plane + 8bit interleaved UV plane (subsampled 2x2).</summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.NV21">
            <summary>YUV 4:2:0. 8bit Y plane + 8bit interleaved VU plane (subsampled 2x2).</summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.RGB888">
            <summary>RGB. 24-bits in 3 channels, 8 bits per channel.</summary>
        </member>
        <member name="F:Vuforia.DriverPixelFormat.RGBA8888">
            <summary>RGB. 32-bits in 4 channels, 8 bits per channel.</summary>
        </member>
        <member name="T:Vuforia.FusionProviderOption">
            \ingroup VuforiaApplicationGroup
            <summary>
            Options for the Fusion Provider configuration.
            Use VuforiaApplication.Instance.Initialize(FusionProviderOption) to initialize Vuforia with
            the selected configuration.
            </summary>
        </member>
        <member name="F:Vuforia.FusionProviderOption.PREFER_PLATFORM_FUSION_PROVIDER">
            <summary>
            When initializing Vuforia, try to use the platform Fusion Provider. If not supported by
            the device, Vuforia will automatically fallback to the next best configuration available.
            </summary>
        </member>
        <member name="F:Vuforia.FusionProviderOption.VUFORIA_FUSION_ONLY">
            <summary>
            When initializing Vuforia, do not try to use the platform Fusion Provider and use the
            Vuforia Fusion Provider instead.
            </summary>
        </member>
        <member name="T:Vuforia.FusionProviderType">
            \ingroup VuforiaApplicationGroup
             <summary>
             Used when calling GetActiveFusionProvider()
            
             Vuforia Fusion is a capability that is designed to provide
             the best possible AR experience on a wide range of devices. Fusion solves the problem
             of fragmentation in AR-enabling technologies, including cameras, sensors, chipsets,
             and software frameworks such as ARKit, ARCore and Windows Holographic. It senses the
             capabilities of the underlying device and fuses them with Vuforia features, allowing
             developers to rely on a single Vuforia API for an optimal AR experience.
            
             The FusionProviderType enums provide advanced developers with a way to
             control which technologies Fusion will use. Developers using these APIs should
             be aware:
               - of the functionality provided by the underlying platforms
               - of the technology involved in enabling AR
               - of the robustness of the various options
               - that features such as GroundPlane will cease to work. ModelTargets will
                 operate in a less robust manner if VUFORIA_VISION_ONLY is selected.
             </summary>
        </member>
        <member name="F:Vuforia.FusionProviderType.UNKNOWN">
            <summary>
            Fusion provider is unknown.
            </summary>
        </member>
        <member name="F:Vuforia.FusionProviderType.VISION_ONLY">
            <summary>
            Use vision-based Fusion only. Please note that not all Vuforia Engine
            features are supported when using this provider.
            </summary>
        </member>
        <member name="F:Vuforia.FusionProviderType.SENSOR_FUSION">
            <summary>
            Use Vuforia-provided technology for Fusion. Vuforia Engine will make
            use of camera and IMU information to try to create a tracking
            experience that, when compared to vision-only, is more robust
            to erratic motions and sparse or featureless environments.
            </summary>
        </member>
        <member name="F:Vuforia.FusionProviderType.PLATFORM_SENSOR_FUSION">
            <summary>
            Use platform-provided technology for Fusion. Vuforia Engine
            will make use of tracking services offered by the underlying
            platform, such as ARKit on iOS, ARCore on Android, or
            Windows Holographic on UWP.
            </summary>
        </member>
        <member name="T:Vuforia.IAnchorProvider">
            <summary>
            Interface to anchor providers
            </summary>
        </member>
        <member name="T:Vuforia.IHitTestProvider">
            <summary>
            Interface to hit test providers
            </summary>
        </member>
        <member name="T:Vuforia.PlayModeHitTestProvider.EmulatorGroundPlaneBehaviour">
            <summary>
            Emulator Ground plane behaviour
            </summary>
        </member>
        <member name="T:Vuforia.DatabaseTargetInfoError">
            <summary>
            Database target info error
            </summary>
        </member>
        <member name="F:Vuforia.DatabaseTargetInfoError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.DatabaseTargetInfoError.DATABASE_LOAD_ERROR">
            <summary>
            Database file not found or an error occurred when reading data from it
            (potentially unknown or corrupted file)
            </summary>
        </member>
        <member name="F:Vuforia.DatabaseTargetInfoError.NO_TARGETS">
            <summary>Could not find any targets in the database from which an observer could be created</summary>
        </member>
        <member name="F:Vuforia.DatabaseTargetInfoError.DATABASE_XML_REQUIRED">
            <summary>The database contains targets that do not support loading directly from the database's DAT file.
            Image Target or VuMark databases generated prior to %Vuforia version release must to be loaded
            from the database's XML file. To query the target infos from this database, and subsequently create
            observers, either provide the database XML file instead or regenerate the database to the latest version.
            </summary>
        </member>
        <member name="T:Vuforia.GuideView">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            This class represents a Guide View which can be extracted from the DataSet
            </summary>
        </member>
        <member name="P:Vuforia.GuideView.Name">
            <summary>
            The name of this guide view
            </summary>
        </member>
        <member name="P:Vuforia.GuideView.Pose">
            <summary>
            The pose of the guide view in camera space
            </summary>
        </member>
        <member name="P:Vuforia.GuideView.Image">
            <summary>
            Guide view image is loaded and cached.
            </summary>
        </member>
        <member name="M:Vuforia.GuideView.UpdateGuideViewTexture">
            <summary>
            Update the guide-view texture to depict the latest changes to the
            guide view and model target. Invokes a PropertyChanged event for the
            Image property if the texture has changed.
            </summary>
        </member>
        <member name="T:Vuforia.HitTestResult">
            \ingroup VuMarkBehaviourGroup
            <summary>
            The result of performing a hit test in the world
            </summary>
        </member>
        <member name="P:Vuforia.HitTestResult.Position">
            <summary>
            Position of the hit test collision point
            </summary>
        </member>
        <member name="P:Vuforia.HitTestResult.Rotation">
            <summary>
            Orientation of the hit test collision point
            </summary>
        </member>
        <member name="T:Vuforia.AnchorBehaviour">
            \ingroup AnchorBehaviourGroup
            <summary>
            An anchor that helps stabilize a GameObjects position in the real world
            </summary>
        </member>
        <member name="M:Vuforia.AnchorBehaviour.ConfigureAnchor(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Creates a mid-air anchor using the transform of the pose (position/rotation) where it should be anchored.
            The behaviour is attached to that anchor.
            </summary>
            <param name="name">The logical name of the anchor. This must be unique among all created anchors.</param>
            <param name="position">The position at which the anchor will be created.</param>
            <param name="rotation">The rotation of the anchor that will be created.</param>
        </member>
        <member name="M:Vuforia.AnchorBehaviour.ConfigureAnchor(System.String,Vuforia.HitTestResult)">
            <summary>
            Creates a plane anchor at the location of the hit test result. The behaviour is attached to that anchor.
            </summary>
            <param name="name">The logical name of the anchor. This must be unique among all created anchors.</param>
            <param name="hitTestResult">The HitTestResult containing the pose at which the anchor will be created on a plane.</param>
        </member>
        <member name="M:Vuforia.AnchorBehaviour.UnconfigureAnchor">
            <summary>
            Detaches the behaviour from an anchor.
            </summary>
        </member>
        <member name="T:Vuforia.AnchorInputListenerBehaviour">
            \ingroup AnchorBehaviourGroup
            <summary>
            Provides a convenient way of capturing user interaction (mouse click or screen tap) and forwarding it
            to another component, e.g. the ContentPositioningBehaviour
            </summary>
        </member>
        <member name="F:Vuforia.AnchorInputListenerBehaviour.OnInputReceivedEvent">
            <summary>
            Gets triggered when the user taps the screen or clicks the left mouse button
            </summary>
        </member>
        <member name="T:Vuforia.ContentPlacedEvent">
            \ingroup AnchorBehaviourGroup
        </member>
        <member name="T:Vuforia.ContentPositioningBehaviour">
            <summary>
            This class provides convenience methods for anchoring content in the real world.
            Can be used in combination with the PlaneFinderBehaviour or MidAirPositionerBehaviour to easily place
            content on a plane or at 3d coordinates
            </summary>
        </member>
        <member name="M:Vuforia.ContentPositioningBehaviour.PositionContentAtMidAirAnchor(UnityEngine.Transform)">
            <summary>
            Anchors the transform at it's current position in the real world for increased
            tracking stability
            </summary>
        </member>
        <member name="M:Vuforia.ContentPositioningBehaviour.PositionContentAtPlaneAnchor(Vuforia.HitTestResult)">
            <summary>
            Anchors the transform at an intersection point with a real world plane for increased
            tracking stability
            </summary>
        </member>
        <member name="T:Vuforia.MidAirPositionerBehaviour">
            \ingroup AnchorBehaviourGroup
            <summary>
            This class is best used in combination with the AnchorInputListenerBehaviour and the ContentPositioningBehaviour
            as it provides sanitation of the input and forwards the result to the ContentPositioningBehaviour for mid-air
            anchor placement 
            </summary>
        </member>
        <member name="T:Vuforia.MidAirPositionerBehaviour.AnchorPositionConfirmedEvent">
            <summary>
            This event gets called once the anchor has been successfully created.
            The event's parameter is the transform of the anchor's GameObject
            </summary>
        </member>
        <member name="F:Vuforia.MidAirPositionerBehaviour.DistanceToCamera">
            <summary>
            The distance from the camera the preview Object will be shown
            </summary>
        </member>
        <member name="F:Vuforia.MidAirPositionerBehaviour.MidAirIndicator">
            <summary>
            The GameObject to be shown as a preview at the anchor position
            </summary>
        </member>
        <member name="F:Vuforia.MidAirPositionerBehaviour.OnAnchorPositionConfirmed">
            <summary>
            Triggered when the Mid Air position has been confirmed
            </summary>
        </member>
        <member name="M:Vuforia.MidAirPositionerBehaviour.ConfirmAnchorPosition(UnityEngine.Vector2)">
            <summary>
            Sends a request to create an anchor at the provided screen position. Upon successful creation,
            the \ref Vuforia.MidAirPositionerBehaviour.OnAnchorPositionConfirmed "OnAnchorPositionConfirmed" event will
            be triggered with the transform of the anchor's GameObject as a parameter
            </summary>
            <param name="screenPosition">The position to create the anchor in screen coordinates</param>
        </member>
        <member name="T:Vuforia.PlaneFinderBehaviour">
            \ingroup AnchorBehaviourGroup
            <summary>
            This component provides convenience functionality for typical use cases of detecting a plane and
            showing a preview of where content would be placed on that plane. Can also be used to perform
            manual hit tests
            </summary>
        </member>
        <member name="F:Vuforia.PlaneFinderBehaviour.PlaneIndicator">
            <summary>
            The GameObject that is shown where a point on a plane is detected
            </summary>
        </member>
        <member name="F:Vuforia.PlaneFinderBehaviour.Height">
            <summary>
            The assumed real world height of the camera in meters
            </summary>
        </member>
        <member name="F:Vuforia.PlaneFinderBehaviour.OnInteractiveHitTest">
            <summary>
            Triggered on an interactive hit test
            </summary>
        </member>
        <member name="F:Vuforia.PlaneFinderBehaviour.OnAutomaticHitTest">
            <summary>
            Triggered on an automatic hit test
            </summary>
        </member>
        <member name="P:Vuforia.PlaneFinderBehaviour.HitTestMode">
            <summary>
            The currently set HitTestMode
            </summary>
        </member>
        <member name="M:Vuforia.PlaneFinderBehaviour.PerformHitTest(UnityEngine.Vector2)">
            <summary>
            Perform a manual hit test at the position in screen space. The OnInteractiveHitTest event
            is triggered if a hit test result is available
            </summary>
            <param name="screenPosition">Screen space position</param>
        </member>
        <member name="T:Vuforia.AreaTargetBehaviour">
            \ingroup AreaTargetBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for an AreaTarget in the editor
            as well as a tracked AreaTarget result at runtime
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetBehaviour.RequiresExternalPositions">
            <summary>
            Return whether the target requires external positions for initial detection
            </summary>
        </member>
        <member name="P:Vuforia.AreaTargetBehaviour.RuntimeMeshBehaviour">
            <summary>
            Get the Mesh Behaviour of this Area Target
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetBehaviour.GetSize">
            <summary>
            Get the size (width, height, length) of the Area Target.
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetBehaviour.GetBoundingBox">
            <summary>
            Returns the bounding box  of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.AreaTargetBehaviour.SetExternal2DPosition(UnityEngine.Vector2,System.Single)">
            <summary>
            Set approximate 2D position within the target from an external localization source.
            </summary>
            <param name="position">Position 2D (x, z) in target coordinate system (which is y-up).</param>
            <param name="horizontalAccuracy">Horizontal accuracy (radial) of the position in meters. Must be positive.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Vuforia.AreaTargetBehaviour.SetExternal3DPosition(UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Set approximate 3D position within the target from an external localization source.
            </summary>
            <param name="position">Position 3D (x, y, z) in target coordinate system (which is y-up).</param>
            <param name="horizontalAccuracy">Horizontal accuracy (radial) of the position in meters. Must be positive.</param>
            <param name="verticalAccuracy">Vertical accuracy of the position in meters. Must be positive.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Vuforia.AreaTargetBehaviour.CreateOcclusion">
            <summary>
            Creates the runtime occlusion model for the AreaTarget either to occlude or to have collider or both.
            </summary>
        </member>
        <member name="T:Vuforia.IRuntimeMeshBehaviour">
            <summary>
            Interface for RuntimeMeshBehaviours
            </summary>
        </member>
        <member name="E:Vuforia.IRuntimeMeshBehaviour.OnMeshBlockAdded">
            <summary>
            Event that is executed when a new Mesh Block was added.
            </summary>
        </member>
        <member name="E:Vuforia.IRuntimeMeshBehaviour.OnMeshBlockUpdated">
            <summary>
            Event that is executed when a Mesh Block was updated.
            </summary>
        </member>
        <member name="E:Vuforia.IRuntimeMeshBehaviour.OnMeshBlockRemoved">
            <summary>
            Event that is executed when a Mesh Block is removed.
            </summary>
        </member>
        <member name="T:Vuforia.RuntimeMeshBehaviour">
            <summary>
            This (internal) class serves as an interface for runtime meshes for various Target types
            </summary>
        </member>
        <member name="E:Vuforia.RuntimeMeshBehaviour.OnMeshBlockAdded">
            <summary>
            Event that is executed when a new Mesh Block was added.
            </summary>
        </member>
        <member name="E:Vuforia.RuntimeMeshBehaviour.OnMeshBlockUpdated">
            <summary>
            Event that is executed when a Mesh Block was updated.
            </summary>
        </member>
        <member name="E:Vuforia.RuntimeMeshBehaviour.OnMeshBlockRemoved">
            <summary>
            Event that is executed when a Mesh Block is removed.
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.RegisterObserverAsync(System.Threading.Tasks.Task{Vuforia.Internal.Observers.IObserver})">
            <summary>
            Asynchronously registers the observer to the behaviour.
            </summary>
            <param name="observerTask">The task that creates the observer</param>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.CreateFromSerializedTarget">
            <summary>
            Runtime Mesh Behaviour can only be created at runtime
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.RegisterObserverInternal(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Executed when a new observer was registered
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.UnregisterObserverInternal(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Executed when the observer is unregistered
            </summary>
            <param name="replaceByObserver"></param>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.OnMeshObservationBlockAdded(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Called by the Mesh Observer when a new mesh block is added
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.OnMeshObservationBlockUpdated(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Called by the Mesh Observer when a mesh block is updated
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviour.OnMeshObservationBlockRemoved(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Called by the Mesh Observer when a mesh block is removed
            </summary>
        </member>
        <member name="T:Vuforia.RuntimeMeshBehaviourFactory">
            <summary>
            Internal factory for Runtime Mesh Behaviours
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviourFactory.CreateRuntimeMeshBehaviour(Vuforia.ModelTargetBehaviour)">
            <summary>
            Factory method to create a RuntimeMeshBehaviour for a ModelTargetBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviourFactory.CreateRuntimeMeshBehaviour(Vuforia.AreaTargetCaptureBehaviour)">
            <summary>
            Factory method to create a RuntimeMeshBehaviour for an AreaTargetCaptureBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshBehaviourFactory.CreateRuntimeMeshBehaviour(Vuforia.AreaTargetBehaviour)">
            <summary>
            Factory method to create a RuntimeMeshBehaviour for an AreaTargetBehaviour
            </summary>
        </member>
        <member name="T:Vuforia.BarcodeBehaviour">
            \ingroup BarcodeBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for a Barcode observer
            </summary>
        </member>
        <member name="T:Vuforia.BarcodeBehaviour.BarcodeType">
            <summary>
            Types of supported barcodes
            </summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.UPCA">
            <summary>1D barcode type, UPC-A</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.UPCE">
            <summary>1D barcode type, UPC-E</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.EAN8">
            <summary>1D barcode type, EAN-8</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.EAN13">
            <summary>1D barcode type, EAN-13</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.CODE39">
            <summary>1D barcode type, CODE 39</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.CODE93">
            <summary>1D barcode type, CODE 93</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.CODE128">
            <summary>1D barcode type, CODE 128</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.CODABAR">
            <summary>1D barcode type, Codabar</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.ITF">
            <summary>1D barcode type, ITF</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.QRCODE">
            <summary>2D barcode type, QR Code</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.DATAMATRIX">
            <summary>2D barcode type, Data Matrix</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.AZTEC">
            <summary>2D barcode type, Aztec</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.PDF417">
            <summary>2D barcode type, PDF417</summary>
        </member>
        <member name="F:Vuforia.BarcodeBehaviour.BarcodeType.MICROQRCODE">
            <summary>2D barcode type, Micro QR Code</summary>
        </member>
        <member name="P:Vuforia.BarcodeBehaviour.ObservedTypes">
            <summary>
            All Barcode types that can be observed
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeBehaviour.DetectMultipleBarcodes">
            <summary>
            Flag to indicate if the observer can detect multiple barcodes in parallel
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeBehaviour.InstanceData">
            <summary>
            The data of the tracked Barcode instance
            </summary>
        </member>
        <member name="E:Vuforia.BarcodeBehaviour.OnBarcodeOutlineChanged">
            <summary>
            Event that is executed when the barcode instance's outline has changed. The vertices are in local space
            relative to the BarcodeBehaviour's transform.
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.CreateFromSerializedTarget">
            <summary>
            Called when Vuforia is started to create the Barcode observer from the serialized properties
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.RegisterObserverInternal(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Called when the Barcode observer is being registered
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.UnregisterObserverInternal(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Called when the Barcode observer is being unregistered
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.AddPreview">
            <summary>
            Adds a BarcodePreview behaviour to the GameObject of the BarcodeBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.OnDisable">
            <summary>
            Stops tracking this target
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.OnEnable">
            <summary>
            Stops tracking this target
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.LateUpdate">
            <summary>
            LateUpdate is called every frame. This is used to remove untracked Barcode Instances from the Manager
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.UpdateBarcodeInstanceData(Vuforia.BarcodeInstanceData)">
            <summary>
            Update the Barcode instance data of a tracked Barcode instance. This is called by the
            BarcodeInstancesManager when a new Barcode observation is received.
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeBehaviour.Clone">
            <summary>
            Clones this BarcodeBehaviour's GameObject and it's children. Does not clone the observer.
            </summary>
        </member>
        <member name="T:Vuforia.BarcodeInstanceData">
            \ingroup BarcodeBehaviourGroup
            <summary>
            Instance info for a barcode from its respective observation
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeInstanceData.Id">
            <summary>
            The unique id of the detected Barcode
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeInstanceData.Text">
            <summary>
            The payload text of the detected Barcode
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeInstanceData.BarcodeType">
            <summary>
            The type of the detected barcode
            </summary>
        </member>
        <member name="P:Vuforia.BarcodeInstanceData.OutlineVertices">
            <summary>
            The corner vertices of the Barcode Instance in local space. The vertices are ordered clockwise beginning at
            the topLeft corner of the Barcode. 
            </summary>
        </member>
        <member name="F:Vuforia.BarcodeInstancesManager.mTrackedBarcodeInstances">
            <summary>
            BarcodeBehaviours that were updated this frame
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.Update">
            <summary>
            Update is called once per frame
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.OnBarcodeObserved(Vuforia.BarcodeInstanceData)">
            <summary>
            Called when a Barcode is observed
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.OnBehaviourDestroyed(Vuforia.ObserverBehaviour)">
            <summary>
            Called when a (cloned) BarcodeBehaviour is destroyed
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.OnBarcodeBehaviourDisabled(Vuforia.BarcodeBehaviour)">
            <summary>
            Called when a (template) BarcodeBehaviour is disabled
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.OnBarcodeBehaviourEnabled(Vuforia.BarcodeBehaviour)">
            <summary>
            Called when a (template) BarcodeBehaviour is enabled
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.CloneTemplate">
            <summary>
            Creates a clone from the template BarcodeBehaviour
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.ClearUntrackedBarcodeInstances">
            <summary>
            Remove all Barcode Instances that are not in the mTrackedBarcodeInstances collection
            </summary>
        </member>
        <member name="M:Vuforia.BarcodeInstancesManager.ClearAllBarcodeInstances">
            <summary>
            Remove all Barcode Instances
            </summary>
        </member>
        <member name="T:Vuforia.CloudRecoBehaviour">
            \ingroup ClouRecoBehaviourGroup
            <summary>
            This is the main behaviour class that encapsulates cloud recognition behaviour.
            
            </summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.AccessKey">
            <summary>
            The user's Cloud Recognition Client Access Key
            </summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.SecretKey">
            <summary>
            The user's Cloud Recognition Client Secret Key
            </summary>
        </member>
        <member name="T:Vuforia.CloudRecoBehaviour.InitError">
            <summary>
            Status codes returned by the CloudRecoObserver creation
            </summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.INTERNAL">
            <summary>An internal error occurred while creating the Cloud Reco</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.AUTOACTIVATION_FAILED">
            <summary>Observer auto-activation failed</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.FEATURE_NOT_SUPPORTED">
            <summary>Feature is not supported by the current license</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.SERVICE_MISSING_AUTHENTICATION">
            <summary>Missing authentication details (user authentication or authentication secret)</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.NO_NETWORK_CONNECTION">
            <summary>No network connection</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.InitError.SERVICE_NOT_AVAILABLE">
            <summary>Service is not available</summary>
        </member>
        <member name="T:Vuforia.CloudRecoBehaviour.QueryError">
            <summary>
            Status codes for the Cloud Reco query errors
            </summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.AUTHORIZATION_FAILED">
            <summary>Credentials are wrong or outdated</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.PROJECT_SUSPENDED">
            <summary>The specified project was suspended</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.NO_NETWORK_CONNECTION">
            <summary>Device has no network connection</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.SERVICE_NOT_AVAILABLE">
            <summary>Server not found, down or overloaded</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.BAD_FRAME_QUALITY">
            <summary>Low frame quality has been continuously observed</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.UPDATE_SDK">
            <summary>SDK Version outdated</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.TIMESTAMP_OUT_OF_RANGE">
            <summary>Client/Server clocks too far away</summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.QueryError.REQUEST_TIMEOUT">
            <summary>No response to network request after timeout</summary>
        </member>
        <member name="T:Vuforia.CloudRecoBehaviour.CloudRecoSearchResult">
            <summary>
            CloudReco search result that contains all known data of a specific search result
            </summary>
        </member>
        <member name="F:Vuforia.CloudRecoBehaviour.CloudRecoSearchResult.TrackingRating">
            The tracking rating represents a 5-star rating describing the
            suitability of this target for tracking on a scale from 0 to 5. A low
            tracking rating may result in poor tracking or unstable augmentation.
        </member>
        <member name="P:Vuforia.CloudRecoBehaviour.CloudRecoInitialized">
            <summary>
            Whether cloud reco has been initialized yet.
            </summary>
        </member>
        <member name="P:Vuforia.CloudRecoBehaviour.Requesting">
            <summary>
            Whether cloud reco is currently performing a request.
            </summary>
        </member>
        <member name="P:Vuforia.CloudRecoBehaviour.RecoStarted">
            <summary>
            Whether cloud reco has started
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.OnEnable">
            <summary>
            If we have been initialized before, we will start the Cloud Reco again here when enabled
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.OnDisable">
            <summary>
            If this component is disabled, the Cloud Reco is stopped
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.RegisterOnInitializedEventHandler(System.Action{Vuforia.CloudRecoBehaviour})">
            <summary>
            Register for event that's called when the CloudRecoBehaviour has finished initializing
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.UnregisterOnInitializedEventHandler(System.Action{Vuforia.CloudRecoBehaviour})">
            <summary>
            Unregister from event that's called when the CloudRecoBehaviour has finished initializing
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.RegisterOnInitErrorEventHandler(System.Action{Vuforia.CloudRecoBehaviour.InitError})">
            <summary>
            Register for event that's called when an error is reported during initialization
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.UnregisterOnInitErrorEventHandler(System.Action{Vuforia.CloudRecoBehaviour.InitError})">
            <summary>
            Unregister from event that's called when an error is reported during initialization
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.RegisterOnUpdateErrorEventHandler(System.Action{Vuforia.CloudRecoBehaviour.QueryError})">
            <summary>
            Register for event that's called when an error is reported while updating
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.UnregisterOnUpdateErrorEventHandler(System.Action{Vuforia.CloudRecoBehaviour.QueryError})">
            <summary>
            Unregister from event that's called when an error is reported while updating
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.RegisterOnStateChangedEventHandler(System.Action{System.Boolean})">
            <summary>
            Register for event that's called when the RecoBehaviour starts or stops scanning
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.RegisterOnNewSearchResultEventHandler(System.Action{Vuforia.CloudRecoBehaviour.CloudRecoSearchResult})">
            <summary>
            Register for event that's called when a new search result is found
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.UnregisterOnNewSearchResultEventHandler(System.Action{Vuforia.CloudRecoBehaviour.CloudRecoSearchResult})">
            <summary>
            Unregister from event that's called when a new search result is found
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.UnregisterOnStateChangedEventHandler(System.Action{System.Boolean})">
            <summary>
            Unregister from event that's called when the RecoBehaviour starts or stops scanning
            </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.EnableObservers(Vuforia.CloudRecoBehaviour.CloudRecoSearchResult,System.String)">
             <summary>
             Enable this search result for tracking.
            
             Activates an Observer for local detection and tracking of this target.
             returns a new ImageTargetBehaviour attached to a new game object with the given name.
             Note that this call may result in an earlier Observer that was enabled for
             tracking to be destroyed, including its ObserverBehaviour.
             Thus it is not advised to hold a reference to an
             earlier created Observer after calling EnableTracking again.
             </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.EnableObservers(Vuforia.CloudRecoBehaviour.CloudRecoSearchResult,UnityEngine.GameObject)">
             <summary>
             Enable this search result for tracking.
            
             Activates an Observer for local detection and tracking of this target.
             If the given game object has no ImageTargetBehaviour, a new one will be created.
             Note that this call may result in an earlier Observer that was enabled for
             tracking to be destroyed, including its ObserverBehaviour.
             Thus it is not advised to hold a reference to an
             earlier created Observer after calling EnableTracking again.
             </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.ClearObservers(System.Boolean)">
             <summary>
             Clears all targets enabled for observers
            
             Destroys all Observers that have been created via EnableObserving().
             </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.GetResults">
             <summary>
             Returns new search results
            
             Earlier search result instances are destroyed
             </summary>
        </member>
        <member name="M:Vuforia.CloudRecoBehaviour.InitializeReco(System.String,System.String)">
             <summary>
             Starts initialization of the cloud-based recognition system.
            
             Pass in the user/password for authenticating with the cloud reco server.
             </summary>
        </member>
        <member name="T:Vuforia.CylinderTargetBehaviour">
            \ingroup CylinderTargetBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for a CylinderTarget in the editor
            as well as a tracked CylinderTarget result at runtime
            </summary>
        </member>
        <member name="F:Vuforia.CylinderTargetBehaviour.mMotionHint">
            Motion Hint is deprecated, but still kept as a serialized member to maintain backwards compatability.
        </member>
        <member name="F:Vuforia.CylinderTargetBehaviour.mTrackingOptimizationNeedsUpgrade">
            Flag to indicate if upgrade to TrackingOptimization is needed
        </member>
        <member name="P:Vuforia.CylinderTargetBehaviour.SideLength">
            <summary>
            Get the side length
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetBehaviour.TopDiameter">
            <summary>
            Get the top diameter
            </summary>
        </member>
        <member name="P:Vuforia.CylinderTargetBehaviour.BottomDiameter">
            <summary>
            Get the bottom diameter
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.SetSideLength(System.Single)">
            <summary>
            Set the side length. Changing this value uniformly scales the target.
            </summary>
            <param name="value">The side length value in meters</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.SetTopDiameter(System.Single)">
            <summary>
            Set the top diameter. Changing this value uniformly scales the target.
            </summary>
            <param name="value">The top diameter value in meters</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.SetBottomDiameter(System.Single)">
            <summary>
            Set the bottom diameter. Changing this value uniformly scales the target.
            </summary>
            <param name="value">The bottom diameter value in meters</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.SetTrackingOptimization(Vuforia.TrackingOptimization)">
            <summary>
            Set the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.GetTrackingOptimization">
            <summary>
            Get the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.CylinderTargetBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="T:Vuforia.DataSetTrackableBehaviour">
            <summary>
            This is the base class for all behaviours observing targets that are part of a dataset
            </summary>
        </member>
        <member name="P:Vuforia.DataSetTrackableBehaviour.DataSetPath">
            <summary>
            The path to the data set in the file system.
            Please be aware that the data set name is not a unique identifier at runtime!
            </summary>
        </member>
        <member name="T:Vuforia.DevicePoseBehaviour">
            \ingroup DevicePoseBehaviourGroup
            <summary>
            Represents the device, such as a phone or a digital eyewear device, of which a position is tracked
            enabling/disabling the Device MonoBehaviour causes the device to start/stop being tracked
            </summary>
        </member>
        <member name="P:Vuforia.DevicePoseBehaviour.StaticMode">
            <summary>
            Get if the device pose is set to static
            </summary>
        </member>
        <member name="M:Vuforia.DevicePoseBehaviour.SetStaticMode(System.Boolean)">
            <summary>
            Configures the device pose for statically mounted devices, e.g. a mobile device on a tripod looking at an object.
            </summary>
            <remarks>
            In such a case, standard Vuforia fusion tracking will not succeed to initialize for lack of movement.
            This setting configures the device tracker to return static poses to stabilize tracking e.g. in case of the object being occluded.
            This method can be called while Vuforia is running, however, doing so will cause the device pose observer to be reset.
            </remarks>
            <param name="value">If static mode is enabled</param>
            <returns>True if the value could be set</returns>
        </member>
        <member name="M:Vuforia.DevicePoseBehaviour.RecenterPose">
            <summary>
            Recenters the device pose to the current transform of the ARCamera
            </summary>
        </member>
        <member name="M:Vuforia.DevicePoseBehaviour.Reset">
            <summary>
            Reset the device pose observer
            On some platforms a new world coordinate system may be created
            with the device's current position and orientation as the origin.
            On some platforms the underlying Vuforia Fusion provider may also be reset.
            Any internal data will be destroyed.
            </summary>
            <returns>true if positional device tracking was reset correctly</returns>
        </member>
        <member name="T:Vuforia.HitTestEvent">
            \ingroup AnchorBehaviourGroup
            <summary>
            An Event that passes a HitTestResult after a performed hit test. HitTestResult can be null.
            </summary>
        </member>
        <member name="T:Vuforia.HitTestMode">
            \ingroup AnchorBehaviourGroup
            <summary>
            The mode in which the surface is found.
            Automatic is used to perform a hit test from the screen center periodically.
            Interactive is used to perform a hit test on manual input (touch, mouse)
            </summary>
        </member>
        <member name="F:Vuforia.HitTestMode.AUTOMATIC">
            <summary>
            Perform a hit test from the screen center periodically
            </summary>
        </member>
        <member name="F:Vuforia.HitTestMode.INTERACTIVE">
            <summary>
            Perform a hit test on manual input (touch, mouse)
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetBehaviour">
            \ingroup ImageTargetBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for an ImageTarget in the editor
            as well as a tracked image target result at runtime
            </summary>
        </member>
        <member name="F:Vuforia.ImageTargetBehaviour.mMotionHint">
            Motion Hint is deprecated, but still kept as a serialized member to maintain backwards compatability.
        </member>
        <member name="F:Vuforia.ImageTargetBehaviour.mTrackingOptimizationNeedsUpgrade">
            Flag to indicate if upgrade to TrackingOptimization is needed
        </member>
        <member name="P:Vuforia.ImageTargetBehaviour.ImageTargetType">
            <summary>
             Type of image target: can be a user created target or a static one from a dataset or cloud reco
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.GetSize">
            <summary>
            Returns the size of this target in scene units
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.GetRuntimeTargetTexture">
            <summary>
            Returns the texture that is assigned to this target during the authoring in the editor.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.SetWidth(System.Single)">
            <summary>
            Set the width (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset of this target has to be deactivated before setting the size.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.SetHeight(System.Single)">
            <summary>
            Set the height (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset of this target has to be deactivated before setting the size.
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.SetTrackingOptimization(Vuforia.TrackingOptimization)">
            <summary>
            Set the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.GetTrackingOptimization">
            <summary>
            Get the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.ImageTargetBehaviour.OnValidate">
            <summary>
            This method is called whenever something is changed in the editor.
            Internal size-values are synchronized regarding the aspect ratio.
            </summary>
        </member>
        <member name="T:Vuforia.ImageTargetType">
            \ingroup ImageTargetBehaviourGroup
            <summary>
            The type of an ImageTarget
            </summary>
        </member>
        <member name="F:Vuforia.ImageTargetType.PREDEFINED">
            <summary>
            Predefined ImageTarget in a dataset
            </summary>
        </member>
        <member name="F:Vuforia.ImageTargetType.CLOUD_RECO">
            <summary>
            Cloud Recognition ImageTarget
            </summary>
        </member>
        <member name="F:Vuforia.ImageTargetType.INSTANT">
            <summary>
            Instant ImageTarget
            </summary>
        </member>
        <member name="F:Vuforia.ImageTargetType.UNKNOWN">
            <summary>
            Default value
            </summary>
        </member>
        <member name="M:Vuforia.MeshBlock.Create(Vuforia.Internal.Observers.MeshObservationBlock,UnityEngine.Transform,UnityEngine.Material[],System.Boolean)">
            <summary>
            Creates the MeshBlock object from the observation data.
            </summary>
            <param name="block">Mesh observation data</param>
            <param name="root">Parent transform of the mesh</param>
            <param name="displayMaterials">Materials to use</param>
            <param name="hasCollider">If a mesh collider should be added, i.e. when runtimeCollision is enabled</param>
            <returns></returns>
        </member>
        <member name="T:Vuforia.ModelTargetBehaviour">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for a ModelTarget in the editor
            as well as a tracked ModelTarget result at runtime
            </summary>
        </member>
        <member name="T:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode">
            <summary>
            The guide view display modes
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode.NoGuideView">
            <summary>
            No guide view rendering (in case there is custom application logic to display some form of snapping view)
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode.GuideView2D">
            <summary>
            2D guide view using the integrated or overwritten texture
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode.GuideView3D">
            <summary>
            3D guide view using the integrated or overwritten 3D model
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.m3DGuideViewModel">
            <summary>
            3D guide view GameObject
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.m2DGuideViewImage">
            <summary>
            2D guide view image
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.mGuideViewDisplayMode">
            <summary>
            Guide view display mode
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.m2DGuideViewMaterial">
            <summary>
            2D guide view material
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.m3DGuideViewMaterial">
            <summary>
            3D guide view material
            </summary>
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.mTrackingOptimizationNeedsUpgrade">
            Flag to indicate if upgrade to TrackingOptimization is needed
        </member>
        <member name="F:Vuforia.ModelTargetBehaviour.mGuideViewDisplayModeNeedsUpgrade">
            Flag to indicate if upgrade to GuideViewDisplayMode is needed
        </member>
        <member name="P:Vuforia.ModelTargetBehaviour.GuideViewMode">
            <summary>
            Get or set the \ref Vuforia.ModelTargetBehaviour.GuideViewDisplayMode "GuideViewDisplayMode"
            </summary>
        </member>
        <member name="P:Vuforia.ModelTargetBehaviour.GuideView2DMaterials">
            <summary>
            2D guide view materials
            </summary>
        </member>
        <member name="P:Vuforia.ModelTargetBehaviour.GuideView3DMaterials">
            <summary>
            3D guide view materials
            </summary>
        </member>
        <member name="P:Vuforia.ModelTargetBehaviour.TrackingOptimization">
            <summary>
            Tracking optimization setting
            </summary>
        </member>
        <member name="P:Vuforia.ModelTargetBehaviour.RuntimeMeshBehaviour">
            <summary>
            Get the Mesh Behaviour of the Model Target
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.OnDrawGizmos">
            <summary>
            Draw Gizmos for this Model Target (Editor Mode).
            The gizmo is a visual guide for aligning virtual content with this Model Target
            represented by a bounding box, grid of the capture area and the origin alignment plane.
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.OnValidate">
            <summary>
            This method is called whenever something is changed in the editor.
            Internal size-values are synchronized with the transform-values.
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.CorrectScaleImpl">
            <summary>
            Scale the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetBoundingBox(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set the Bounding Box (only in editor mode).
            </summary>
            <param name="minBBox">bounding box min position</param>
            <param name="maxBBox">bounding box max position</param>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetBoundingBox">
            <summary>
            Return the bounding box of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetNumGuideViews">
            <summary>
            The number of guide views for the model target
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetActiveGuideViewIndex(System.Int32)">
            <summary>
            Set the index for an active GuideView for this ModelTarget
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetSize">
            <summary>
            Return the size of this target in scene units
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetLength(System.Single)">
            <summary>
            Set the length (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="length">length value</param>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetWidth(System.Single)">
            <summary>
            Set the width (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="width">width value</param>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetHeight(System.Single)">
            <summary>
            Set the height (z-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
            <param name="height">height value</param>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetActiveGuideViewIndex">
            <summary>
            Return the active Guide View index
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetActiveGuideViewName(System.String)">
            <summary>
            Activates a guide view by name
            </summary>
            <param name="guideViewName">The name of the guide view to be activated</param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetGuideView(System.Int32)">
            <summary>
            Return a Guide View with a given index
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetTrackingOptimization">
            <summary>
            Get the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetTrackingOptimization(Vuforia.TrackingOptimization)">
            <summary>
            Set tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.SetActiveStateName(System.String)">
            <summary>
            Set the active state name
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetActiveStateName">
            <summary>
            Get the active state name
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.GetAvailableStateNames">
            <summary>
            Get a collection of all available state names
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.Reset">
            <summary>
            Reset tracking of this Model Target observer
            This will stop any ongoing tracking of this Model Target including extended tracking. The tracking will automatically restart if the target is recognized again.
            Only an activated target can be reset.
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.OnEnable">
            <summary>
            Lifecycle method called whenever a dataset is activated or deactivated causing a change in the
            activated state of the trackable
            </summary>
        </member>
        <member name="M:Vuforia.ModelTargetBehaviour.CreateOcclusion">
            <summary>
            Creates the runtime occlusion model for the ModelTarget either to occlude or to have collider or both.
            </summary>
        </member>
        <member name="T:Vuforia.GuideView2DBehaviour">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            Class representing a 2D Guide View for Model Target Detection.
            </summary>
        </member>
        <member name="M:Vuforia.GuideView2DBehaviour.UpdateView(Vuforia.ModelTargetBehaviour,Vuforia.GuideView)">
            <summary>
            Update the Guide View content and layout
            </summary>
            <param name="modelTarget">Model Target owning the Guide View</param>
            <param name="guideView">Guide View to update</param>
        </member>
        <member name="T:Vuforia.GuideView3DBehaviour">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            Class representing a 3D Guide View for Model Target Detection.
            </summary>
        </member>
        <member name="M:Vuforia.GuideView3DBehaviour.UpdateFromGuideViewPose">
            <summary>
            Update the pose of the behaviour to the latest pose of the current Guide View
            </summary>
        </member>
        <member name="M:Vuforia.GuideView3DBehaviour.UpdateView(Vuforia.ModelTargetBehaviour,Vuforia.GuideView)">
            <summary>
            Updates the Guide View content and layout.
            </summary>
            <param name="modelTarget">The Model Target to render the Guide View for</param>
            <param name="guideView">The active Guide View of the Model Target</param>
        </member>
        <member name="T:Vuforia.GuideViewCameraBehaviour">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            This class represents a Guide View Camera, which can be used to configure 
            the guide view pose for detection of a Model Target.
            When attaching this component to a game object, 
            a Camera will be created automatically.
            This Camera is only used at Editor time to faciliate the Application developer
            to adjust the Pose visually by looking at the Camera preview.
            At runtime, the Camera component will be automatically disabled.
            </summary>
        </member>
        <member name="T:Vuforia.GuideViewRenderingBehaviour">
            \ingroup ModelTargetBehaviourGroup
            <summary>
            Class handling the activation/update/rendering of the Guide View for Model Target detection.
            </summary>
        </member>
        <member name="F:Vuforia.GuideViewRenderingBehaviour.guideReappearanceDelay">
            <summary>
            Time (in seconds) before the Guide View reappears after tracking is lost
            </summary>
        </member>
        <member name="M:Vuforia.GuideViewRenderingBehaviour.DeleteTargetGuideView">
            <summary>
            Destroys the internal GuideViewGameObject and makes sure that a 3D guideview object is returned to it's previous owner
            </summary>
        </member>
        <member name="M:Vuforia.GuideViewRenderingBehaviour.Initialize(Vuforia.ModelTargetBehaviour)">
            <summary>
            Setup function that creates the necessary GuideView rendering components for the provided ModelTargetBehaviour
            Depending on the set GuideView display mode, different scene-trees are created
            </summary>
            <param name="modelTarget">The ModelTarget to be used for GuideView rendering</param>
        </member>
        <member name="M:Vuforia.GuideViewRenderingBehaviour.DetachEvents">
            <summary>
            \deprecated This method is obsolete and will be removed in an upcoming version of Vuforia
            </summary>
        </member>
        <member name="M:Vuforia.GuideViewRenderingBehaviour.DetachEventsInternal">
            <summary>
            Detaches the events from this instance to the guideview object.
            Call before destroying
            </summary>
        </member>
        <member name="T:Vuforia.MultiTargetBehaviour">
            \ingroup MultiTargetBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for a MultiTarget in the editor
            as well as a tracked MultiTarget result at runtime
            </summary>
        </member>
        <member name="F:Vuforia.MultiTargetBehaviour.mTrackingOptimizationNeedsUpgrade">
            Flag to indicate if upgrade to TrackingOptimization is needed
        </member>
        <member name="M:Vuforia.MultiTargetBehaviour.GetSize">
            <summary>
            Returns the size  of the target (in 3D scene units).
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetBehaviour.SetSize(UnityEngine.Vector3)">
            <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetBehaviour.SetTrackingOptimization(Vuforia.TrackingOptimization)">
            <summary>
            Set the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.MultiTargetBehaviour.GetTrackingOptimization">
            <summary>
            Get the tracking optimization
            </summary>
        </member>
        <member name="T:Vuforia.ObserverBehaviour">
            \ingroup ObserverBehaviourGroup
            <summary>
            The base class of all observer behaviour components. Provides access to base functionality
            and information of the observer
            </summary>
        </member>
        <member name="F:Vuforia.ObserverBehaviour.mTrackableName">
            <summary>
            For dataset-trackables this value is retrieved from the dataset and it is
            used for detecting that the specified trackable in the dataset is not valid anymore.
            </summary>
        </member>
        <member name="E:Vuforia.ObserverBehaviour.OnTargetStatusChanged">
            <summary>
            Triggered when the TargetStatus changes
            </summary>
        </member>
        <member name="E:Vuforia.ObserverBehaviour.OnBehaviourDestroyed">
            <summary>
            Triggered when this behaviour is destroyed. Can be used for script cleanup
            </summary>
        </member>
        <member name="P:Vuforia.ObserverBehaviour.TargetName">
            <summary>
            Name of the target of the Observer
            </summary>
        </member>
        <member name="P:Vuforia.ObserverBehaviour.TargetStatus">
            <summary>
            Current status information of the target
            </summary>
        </member>
        <member name="P:Vuforia.ObserverBehaviour.ID">
            <summary>
            The runtime Id of the Observer
            </summary>
        </member>
        <member name="M:Vuforia.ObserverBehaviour.OnEnable">
            <summary>
            Starts tracking this target
            </summary>
            <exception cref="T:System.Exception">Thrown when the observer cannot be activated</exception>
        </member>
        <member name="M:Vuforia.ObserverBehaviour.OnDisable">
            <summary>
            Stops tracking this target
            </summary>
        </member>
        <member name="M:Vuforia.ObserverBehaviour.DoDeactivateObserverOnUnregistering(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Returns true if the observer should be deactivated when it's being unregistered from this
            game object
            </summary>
        </member>
        <member name="M:Vuforia.ObserverBehaviour.DoDestroyThisWithObserver(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Returns true if the game object should be destroyed whenever the observer is being
            destroyed
            </summary>
        </member>
        <member name="M:Vuforia.ObserverBehaviour.DoDestroyObserverWithThis(Vuforia.Internal.Observers.IObserver)">
            <summary>
            Returns true if the observer should be destroyed whenever the game object is being
            destroyed
            </summary>
        </member>
        <member name="T:Vuforia.RuntimeMeshRenderingBehaviour">
            \ingroup MeshSetModelreatorGroup
            <summary>
            Renders the runtime Mesh of a Vuforia Target
            </summary>
        </member>
        <member name="P:Vuforia.RuntimeMeshRenderingBehaviour.RuntimeMeshRoot">
            <summary>
            Root GameObject of the rendered runtime mesh
            </summary>
        </member>
        <member name="P:Vuforia.RuntimeMeshRenderingBehaviour.DisplayMaterial">
            <summary>
            The material that is automatically applied to all mesh blocks.
            </summary>
        </member>
        <member name="P:Vuforia.RuntimeMeshRenderingBehaviour.DisplayMaterials">
            <summary>
            The materials that are automatically applied to all mesh blocks.
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.Start">
            <summary>
            Called when the script is starting.
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnDestroy">
            <summary>
            Called when the script is being destroyed
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnVuforiaStarted">
            <summary>
            Called when Vuforia is started
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.CreateFromSerializedTarget">
            <summary>
            Creates the Runtime Mesh Rendering Behaviour from a serialized object
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.Initialize(Vuforia.IRuntimeMeshBehaviour,UnityEngine.Material[],System.Boolean)">
            <summary>
            Initializes the visualization. Clears any previous visualization
            </summary>
            <param name="meshBehaviour">The RuntimeMeshBehaviour that is rendered</param>
            <param name="displayMaterials">The Materials for rendering. </param>
            <param name="withCollision">True if the mesh should have collision enabled</param>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.ResetInternal(System.Boolean)">
            <summary>
            Reset the visualization
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnAreaTargetCaptureStopped(Vuforia.AreaTargetCaptureStatus)">
            <summary>
            Callback that is executed when the AreaTargetCapture is stopped (Only executed if mSourceBehaviour is an
            AreaTargetCaptureBehaviour)
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnMeshBlockAdded(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Callback that is executed when a new mesh block arrives
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnMeshBlockUpdated(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Callback that is executed when a mesh block is updated
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.OnMeshBlockRemoved(Vuforia.Internal.Observers.MeshObservationBlock)">
            <summary>
            Callback that is executed when a mesh block is removed
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.CreateMeshRoot">
            <summary>
            Helper function to create the mesh root GameObject
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.DestroyMeshRoot">
            <summary>
            Helper function to destroy all mesh block GameObjects and the root GameObject
            </summary>
        </member>
        <member name="M:Vuforia.RuntimeMeshRenderingBehaviour.DestroyMeshBlocks">
            <summary>
            Helper function to destroy all mesh block GameObjects
            </summary>
        </member>
        <member name="T:Vuforia.ScalableDataSetTrackableBehaviour">
            <summary>
            This is the base class for all trackables that are part of a dataset and are scalable
            </summary>
        </member>
        <member name="M:Vuforia.ScalableDataSetTrackableBehaviour.CorrectScale">
            <summary>
            Corrects scaling for trackables where non-uniform scaling is not allowed
            </summary>
        </member>
        <member name="M:Vuforia.ScalableDataSetTrackableBehaviour.CorrectScaleImpl">
            <summary>
            Overwrite this method when a specific scale should be enforced.
            </summary>
        </member>
        <member name="M:Vuforia.ScalableDataSetTrackableBehaviour.SetScale(System.Single)">
            <summary>
            Set scale-value of this trackable.
            </summary>
            <param name="scale">Scaling factor</param>
            <returns>returns whether changing scale was successful</returns>
        </member>
        <member name="T:Vuforia.VuMarkBehaviour">
            \ingroup VuMarkBehaviourGroup
            <summary>
            This class serves both as an augmentation definition for a VuMark in the editor
            as well as a tracked VuMark result at runtime
            </summary>
        </member>
        <member name="F:Vuforia.VuMarkBehaviour.mMotionHint">
            Motion Hint is deprecated, but still kept as a serialized member to maintain backwards compatability.
        </member>
        <member name="F:Vuforia.VuMarkBehaviour.mTrackingOptimizationNeedsUpgrade">
            Flag to indicate if upgrade to TrackingOptimization is needed
        </member>
        <member name="P:Vuforia.VuMarkBehaviour.InstanceId">
            <summary>
            The InstanceId contains the id for a particular VuMark.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkBehaviour.InstanceImage">
            <summary>
            Returns the generated image of the detected VuMark.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkBehaviour.VuMarkUserData">
            <summary>
            Gets the user data associated with this template that comes from
            the dataset.  If there is no VuMark use data associated with this
            template, an empty string is returned.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkBehaviour.TrackingFromRuntimeAppearance">
            <summary>
            Sets or gets whether the VuMark has a changing background per instance, signaling
            to SDK how to track it.
            </summary>
            Setting TrackingFromRuntimeAppearance to true indicates that the SDK
            should track this type of VuMark based on what is seen by the camera and
            not assume the template background image is useful for tracking because
            the background can change per instance.
            Setting TrackingFromRuntimeAppearance to false indicates that the SDK
            should track this type of VuMark based on VuMark Template used to create
            the dataset. This is the default behavior.
        </member>
        <member name="P:Vuforia.VuMarkBehaviour.Origin">
            <summary>
            Returns the size-scaled origin of the VuMark
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.GetSize">
            <summary>
            Returns the size of this target in scene units
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.SetWidth(System.Single)">
            <summary>
            Set the width (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset has to be deactivated before changing the size.
            Make sure to set the same size for all instantiated behaviours
            of the same VuMark-template
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.SetHeight(System.Single)">
            <summary>
            Set the height (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset has to be deactivated before changing the size.
            Make sure to set the same size for all instantiated behaviours
            of the same VuMark-template
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.SetTrackingOptimization(Vuforia.TrackingOptimization)">
            <summary>
            Set the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.GetTrackingOptimization">
            <summary>
            Get the tracking optimization
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.CorrectScaleImpl">
            <summary>
            Scales the Trackable uniformly
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.OnValidate">
            <summary>
            This method is called whenever something is changed in the editor.
            Internal size-values are synchronized with the transform-values.
            </summary>
        </member>
        <member name="M:Vuforia.VuMarkBehaviour.CleanUntrackedBehavioursCache">
            <summary>
            Clean the cache of previously seen VuMark instances that are not actively tracked now.
            </summary>
            <remarks>
            The cache is automatically cleaned whenever Vuforia is paused or when the authored VuMarkBehaviour
            that is being used as a template for all instances is disabled,
            </remarks>
        </member>
        <member name="F:Vuforia.VuMarkInstancesManager.mUntrackedBehavioursCache">
            <summary>
            VuMark behaviours that have been tracked once but are lost now. They are put into this cache so they
            can be fetched later again when a VuMark instance for that behaviour is tracked again
            </summary>
        </member>
        <member name="T:Vuforia.ObserverFactory">
            \ingroup ObserverFactoryGroup
            <summary>
            Provides methods to create Vuforia tracked targets
            </summary>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAnchorBehaviour(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Creates an Anchor Behaviour in mid air using the transform of the pose (position/rotation) where it
            should be anchored.
            </summary>
            <param name="name">The logical name of the anchor. This must be unique among all created anchors.</param>
            <param name="position">The position at which the anchor will be created.</param>
            <param name="rotation">The rotation of the anchor that will be created.</param>
            <returns>The Anchor Behaviour at the specified position and rotation.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAnchorBehaviour(System.String,Vuforia.HitTestResult)">
            <summary>
            Creates an Anchor Behaviour on a plane using the location (position/rotation) of a HitTestResult from
            a previous World.HitTest().
            </summary>
            <param name="name">The logical name of the anchor. This must be unique among all created anchors.</param>
            <param name="hitTestResult">The HitTestResult containing the pose at which the anchor will be created
            on a plane.</param>
            <returns>The Anchor Behaviour on the plane at the location of the hit test.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTarget(System.String,System.String,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTargetAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously creates an Area Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTarget``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a Cloud Area Target.
            </summary>
            <param name="userAuth">OAuth2 client id for logging in to the cloud-based Area Target server</param>
            <param name="secretAuth">OAuth2 client secret for logging in to the cloud-based Area Target server</param>
            <param name="targetId">ID of the Cloud Area Target, a UUID without dashes</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTargetAsync``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a Cloud Area Target.
            </summary>
            <param name="userAuth">OAuth2 client id for logging in to the cloud-based Area Target server</param>
            <param name="secretAuth">OAuth2 client secret for logging in to the cloud-based Area Target server</param>
            <param name="targetId">ID of the Cloud Area Target, a UUID without dashes</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTarget``1(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a Cloud Area Target.
            </summary>
            <param name="userAuth">OAuth2 client id for logging in to the cloud-based Area Target server</param>
            <param name="secretAuth">OAuth2 client secret for logging in to the cloud-based Area Target server</param>
            <param name="targetId">ID of the Cloud Area Target, a UUID without dashes</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion. Occlusion data is fetched from the cloud.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTargetAsync``1(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a Cloud Area Target.
            </summary>
            <param name="userAuth">OAuth2 client id for logging in to the cloud-based Area Target server</param>
            <param name="secretAuth">OAuth2 client secret for logging in to the cloud-based Area Target server</param>
            <param name="targetId">ID of the Cloud Area Target, a UUID without dashes</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion. Occlusion data is fetched from the cloud.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTarget(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates an Area Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="occlusionModelPath">Absolute path to the '*_occlusion.dt' file. If not set, it will be searched next
            to the dataset file.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateAreaTargetAsync(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Asynchronously creates an Area Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="occlusionModelPath">Absolute path to the '*_occlusion.dt' file. If not set, it will be searched next
            to the dataset file.</param>
            <param name="requiresExternalPositions">Optional parameter to force the dataset to require an external position. Useful to optimize large dataset loading behavior</param>
            <returns>The Area Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateBarcodeBehaviour(System.Collections.Generic.HashSet{Vuforia.BarcodeBehaviour.BarcodeType},System.Boolean)">
            <summary>
            Creates a Barcode Behaviour
            </summary>
            <param name="observedTypes">The set of observable Barcode Types.</param>
            <param name="detectMultipleBarcodes">Flag to indicate whether the BarcodeBehaviour should detect multiple Barcodes in parallel.</param>
            <returns>The created Barcode Behaviour</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateCloudRecoBehaviour(System.String,System.String)">
            <summary>
            Creates a Cloud Recognition using auth keys. Then initializes the reco.
            </summary>
            <returns>The CloudReco Behaviour from the provided auth keys.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateCylinderTarget(System.String,System.String)">
            <summary>
            Creates a Cylinder Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Cylinder Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateCylinderTargetAsync(System.String,System.String)">
            <summary>
            Asynchronously creates a Cylinder Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Cylinder Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateDevicePoseBehaviour(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Creates the Device Behaviour that observes the device pose.
            </summary>
            <param name="rootObject">The object on which the ARCamera (VuforiaBehaviour) resides.</param>
            <param name="enabled">Controls if the behaviour should be enabled</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTarget(System.String,System.String)">
            <summary>
            Creates an Image Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Image Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTargetAsync(System.String,System.String)">
            <summary>
            Asynchronously creates an Image Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Image Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTarget(System.String,System.Single,System.String)">
            <summary>
            Creates an Image Target from a path to a Unity Texture file.
            </summary>
            <remarks>Images with width or height bigger than 2048 pixels are not supported.</remarks>
            <param name="filePath">The file path of the image to be used as target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified file.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTargetAsync(System.String,System.Single,System.String)">
            <summary>
            Asynchronously creates an Image Target from a path to a Unity Texture file.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <remarks>Images with width or height bigger than 2048 pixels are not supported.</remarks>
            <param name="filePath">The file path of the image to be used as target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified file.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTarget(UnityEngine.Texture2D,System.Single,System.String)">
            <summary>
            Creates an Image Target from a Unity Texture2D.
            </summary>
            <remarks>Images with width or height bigger than 2048 pixels are not supported.</remarks>
            <param name="texture">The texture from which the new Image Target is created.</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified Unity Texture2D.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTargetAsync(UnityEngine.Texture2D,System.Single,System.String)">
            <summary>
            Asynchronously creates an Image Target from a Unity Texture2D.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <remarks>Images with width or height bigger than 2048 pixels are not supported.</remarks>
            <param name="texture">The texture from which the new Image Target is created.</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified Unity Texture2D.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTarget(System.IntPtr,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Single,System.String)">
            <summary>
            Create an Image Target using raw image data loaded by functions independent from Vuforia Engine.
            <remarks>
            <para>Currently only unpadded image sources are correctly supported.</para>
            <para>Images with width or height bigger than 2048 pixels are not supported.</para>
            </remarks>
            </summary>
            <param name="texturePointer">Pointer to the memory location of the image buffer.</param>
            <param name="textureWidth">The width of the image in pixels.</param>
            <param name="textureHeight">The height of the image in pixels.</param>
            <param name="format">The texture format of the image.</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified image buffer.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateImageTargetAsync(System.IntPtr,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Single,System.String)">
            <summary>
            Asynchronously create an Image Target using raw image data loaded by functions independent from Vuforia Engine.
            Use this method to prevent blocking the main thread while loading the target.
            <remarks>
            <para>Currently only unpadded image sources are correctly supported.</para>
            <para>Images with width or height bigger than 2048 pixels are not supported.</para>
            </remarks>
            </summary>
            <param name="texturePointer">Pointer to the memory location of the image buffer.</param>
            <param name="textureWidth">The width of the image in pixels.</param>
            <param name="textureHeight">The height of the image in pixels.</param>
            <param name="format">The texture format of the image.</param>
            <param name="widthInMeters">The real world width of the target in meters.</param>
            <param name="targetName">The name of the resulting target.</param>
            <returns>The Image Target Behaviour from the specified image buffer.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateModelTarget(System.String,System.String,System.Nullable{Vuforia.TrackingOptimization},System.Boolean)">
            <summary>
            Creates a Model Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="trackingOptimization">Optionally specify the tracking optimization for the target.</param>
            <param name="enhanceRuntimeDetection">Optionally enhance detection performance by caching local detection data for the target.</param>
            <returns>The Model Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateModelTargetAsync(System.String,System.String,System.Nullable{Vuforia.TrackingOptimization},System.Boolean)">
            <summary>
            Asynchronously creates a Model Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="trackingOptimization">Optionally specify the tracking optimization for the target.</param>
            <param name="enhanceRuntimeDetection">Optionally enhance detection performance by caching local detection data for the target.</param>
            <returns>The Model Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateModelTarget(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{Vuforia.TrackingOptimization},System.Boolean)">
            <summary>
            Creates a Model Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="trackingOptimization">Optionally specify the tracking optimization for the target.</param>
            <param name="enhanceRuntimeDetection">Optionally enhance detection performance by caching local detection data for the target.</param>
            <returns>The Model Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateModelTargetAsync(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{Vuforia.TrackingOptimization},System.Boolean)">
            <summary>
            Asynchronously creates a Model Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <param name="hasOcclusion">Sets if target will have a runtime occlusion.</param>
            <param name="hasCollision">Sets if target will have a runtime collision.</param>
            <param name="trackingOptimization">Optionally specify the tracking optimization for the target.</param>
            <param name="enhanceRuntimeDetection">Optionally enhance detection performance by caching local detection data for the target.</param>
            <returns>The Model Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateMultiTarget(System.String,System.String)">
            <summary>
            Creates a Multi Target Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Multi Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateMultiTargetAsync(System.String,System.String)">
            <summary>
            Asynchronously creates a Multi Target Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The Multi Target Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateVuMarkBehaviour(System.String,System.String)">
            <summary>
            Creates a VuMark Behaviour from a target stored in a Vuforia database.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The VuMark Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateVuMarkBehaviourAsync(System.String,System.String)">
            <summary>
            Asynchronously creates a VuMark Behaviour from a target stored in a Vuforia database.
            Use this method to prevent blocking the main thread while loading the target.
            </summary>
            <param name="databasePath">The path to the XML file of the database that contains the target.
            Must be either an absolute path or relative to "StreamingAssets".</param>
            <param name="targetName">The name of the target in the database.</param>
            <returns>The VuMark Behaviour created from the specified target.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateBehavioursFromDatabase(System.String)">
            <summary>
            Creates Behaviours from all observers in a database.
            </summary>
            <param name="databasePath">The path to the XML file of the database for which to load observer
            Behaviours. Must be either an absolute path or relative to "StreamingAssets".</param>
            <returns>A list of Behaviours extracted from the targets in the database.</returns>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour(Vuforia.ModelTargetBehaviour,UnityEngine.Material)">
            <summary>
            Create a Runtime Mesh Behaviour for the Model Target.
            </summary>
            <param name="modelTargetBehaviour">The Model Target whose runtime mesh should be rendered.</param>
            <param name="displayMaterial">The material used to display the runtime mesh.</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour``1(``0,UnityEngine.Material,System.Boolean)">
            <summary>
            Create a Runtime Mesh Rendering Behaviour for the Area Target.
            </summary>
            <param name="areaTargetBehaviour">The Area Target whose runtime mesh should be rendered.</param>
            <param name="displayMaterial">The material used to display the runtime mesh.</param>
            <param name="hasCollision">Flag to indicate if the runtime meshes should collide with other objects</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour(Vuforia.AreaTargetCaptureBehaviour,UnityEngine.Material,System.Boolean)">
            <summary>
            Create a Runtime Mesh Rendering Behaviour for the Area Target Capture Behaviour.
            </summary>
            <param name="areaTargetCaptureBehaviour">The Area Target Capture whose runtime mesh should be rendered.</param>
            <param name="displayMaterial">The material used to display the runtime mesh.</param>
            <param name="hasCollision">Flag to indicate if the runtime meshes should collide with other objects</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour(Vuforia.ModelTargetBehaviour,UnityEngine.Material[])">
            <summary>
            Create a Runtime Mesh Behaviour for the Model Target.
            </summary>
            <param name="modelTargetBehaviour">The Model Target whose runtime mesh should be rendered.</param>
            <param name="displayMaterials">The materials used to display the runtime mesh.</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour``1(``0,UnityEngine.Material[],System.Boolean)">
            <summary>
            Create a Runtime Mesh Rendering Behaviour for the Area Target.
            </summary>
            <param name="areaTargetBehaviour">The Area Target whose runtime mesh should be rendered.</param>
            <param name="displayMaterials">The materials used to display the runtime mesh.</param>
            <param name="hasCollision">Flag to indicate if the runtime meshes should collide with other objects</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshRenderingBehaviour(Vuforia.AreaTargetCaptureBehaviour,UnityEngine.Material[],System.Boolean)">
            <summary>
            Create a Runtime Mesh Rendering Behaviour for the Area Target Capture Behaviour.
            </summary>
            <param name="areaTargetCaptureBehaviour">The Area Target Capture whose runtime mesh should be rendered.</param>
            <param name="displayMaterials">The materials used to display the runtime mesh.</param>
            <param name="hasCollision">Flag to indicate if the runtime meshes should collide with other objects</param>
        </member>
        <member name="M:Vuforia.ObserverFactory.CreateRuntimeMeshBehaviourImpl``1(Vuforia.IRuntimeMeshBehaviour,UnityEngine.Material[],System.Boolean,UnityEngine.HideFlags)">
            <summary>
            Internal factory function to create a derived RuntimeMeshRenderingBehaviour
            </summary>
            <param name="meshBehaviour">The Runtime Mesh to be rendered</param>
            <param name="displayMaterials">The materials to use to display the meshes</param>
            <param name="hasCollision">Flag to indicate if the runtime meshes should collide with other objects</param>
            <param name="hideFlags">Hide flags applied to the GameObject of the Visualization Behaviours</param>
            <typeparam name="T">The type of the RuntimeMeshBehaviour</typeparam>
            <returns>Returns the GameObject containing the RuntimeMeshBehaviour</returns>
        </member>
        <member name="T:Vuforia.Status">
            \ingroup ObserverBehaviourGroup
            <summary>
            The tracking status of the TrackableBehaviour.
            </summary>
        </member>
        <member name="F:Vuforia.Status.NO_POSE">
            <summary>
            Pose for the trackable could not be delivered.
            </summary>
        </member>
        <member name="F:Vuforia.Status.LIMITED">
            <summary>
            The tracking is limited.
            </summary>
        </member>
        <member name="F:Vuforia.Status.TRACKED">
            <summary>
            The trackable was tracked.
            </summary>
        </member>
        <member name="F:Vuforia.Status.EXTENDED_TRACKED">
            <summary>
            The trackable was extended tracked.
            </summary>
        </member>
        <member name="T:Vuforia.StatusInfo">
            \ingroup ObserverBehaviourGroup
            <summary>
            Information on the tracking status. Gives the primary reason about the 
            problem with tracking (STATUS::NO_POSE or STATUS::LIMITED).
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.NORMAL">
            <summary>
            Tracking is working normally.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.NOT_OBSERVED">
            <summary>
            Target is not detected.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.UNKNOWN">
            <summary>
            Unknown reason for limited status.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.INITIALIZING">
            <summary>
            Not enough information yet for accurate tracking.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.RELOCALIZING">
            <summary>
            The tracking system is currently relocalizing.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.EXCESSIVE_MOTION">
            <summary>
            Moving too fast for accurate tracking.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.INSUFFICIENT_FEATURES">
            <summary>
            Not enough features for accurate tracking.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.INSUFFICIENT_LIGHT">
            <summary>
            Not enough light for accurate tracking.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.RECOMMENDING_GUIDANCE">
            <summary>
            Could not snap the target. Recommend to show a Guide View overlay.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.WRONG_SCALE">
            <summary>
            The target scale does not match the physical scale of the object.
            </summary>
        </member>
        <member name="F:Vuforia.StatusInfo.MISSING_DATA">
            <summary>
            Asynchronous loading of the tracking data failed. Tracking quality might decrease or the tracking might be lost.
            </summary>
        </member>
        <member name="T:Vuforia.TargetStatus">
            \ingroup ObserverBehaviourGroup
            <summary>
            Includes tracking status and tracking information of a target
            </summary>
        </member>
        <member name="T:Vuforia.VuMarkInstanceId">
            \ingroup VuMarkBehaviourGroup
            <summary>
            The InstanceId contains the id for a particular VuMark.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkInstanceId.DataType">
            <summary>
            The type of data the InstanceId contains.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkInstanceId.Buffer">
            <summary>
            The raw byte buffer ID data.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkInstanceId.HexStringValue">
            <summary>
            The Hex value of the byte data as a string
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkInstanceId.StringValue">
            <summary>
            Returns the byte buffer interpreted as an ASCII string if the datatype
            is marked as a STRING, an empty string otherwise.
            </summary>
        </member>
        <member name="P:Vuforia.VuMarkInstanceId.NumericValue">
            <summary>
            Returns the byte buffer as a 64bit unsigned long if the data type is
            marked as a NUMBER. 0 is returned otherwise.
            </summary>
        </member>
        <member name="T:Vuforia.InstanceIdType">
            \ingroup VuMarkBehaviourGroup
            <summary>
            VuMark ID Type
            </summary>
        </member>
        <member name="F:Vuforia.InstanceIdType.BYTE">
            <summary>
            Generic byte data, stored in little-endian order in the buffer.
            For example, an ID of 0x123456 would appear as { 0x56, 0x34, 0x12 }
            </summary>
        </member>
        <member name="F:Vuforia.InstanceIdType.STRING">
            <summary>
            Printable ASCII string data.
            </summary>
        </member>
        <member name="F:Vuforia.InstanceIdType.NUMERIC">
            <summary>
            Numeric data, no larger than a 64 bit unsigned long long.
            </summary>
        </member>
        <member name="T:Vuforia.DistortionMode">
            \ingroup CameraDeviceGroup
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_LINEAR">
            <summary>Linear model (no distortion or undistortion)</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_1_PARAM">
            <summary>ARCTAN model with one parameter</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_2_PARAMS">
            <summary>2 radial parameters, no tangential parameters</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_3_PARAMS">
            <summary>3 radial parameters, no tangential parameters</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_4_PARAMS">
            <summary>2 radial parameters, plus 2 tangential parameters</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_5_PARAMS">
            <summary>3 radial parameters, plus 2 tangential parameters</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_6_PARAMS">
            <summary>6 radial parameters (rational), no tangential parameters</summary>
        </member>
        <member name="F:Vuforia.DistortionMode.MODE_8_PARAMS">
            <summary>6 radial parameters (rational), plus 2 tangential parameters</summary>
        </member>
        <member name="T:Vuforia.Image">
            \ingroup CameraDeviceGroup
            <summary>
            Representation of an image, typically returned by the CameraDevice.
            </summary>
            The image's pixel buffer may have a different size than expected based on the
            values of Width and Height. 
        </member>
        <member name="M:Vuforia.Image.#ctor(Vuforia.IVuImage)">
            <summary>
            Constructor from IVuImage
            </summary>
        </member>
        <member name="M:Vuforia.Image.Resize(Vuforia.ImageDescription)">
            <summary>
            Resizing an image deletes any existing image data
            </summary>
        </member>
        <member name="P:Vuforia.Image.Width">
            <summary>
            The width of the image in pixels.
            Note that the pixel buffer can be wider than this.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Height">
            <summary>
            The height of the image in pixels.
            Note that the pixel buffer can be higher than this.
            </summary>
        </member>
        <member name="P:Vuforia.Image.Stride">
            <summary>
            The number of bytes between the start of a pixel row and the start of the next
            </summary>
        </member>
        <member name="P:Vuforia.Image.BufferWidth">
            <summary>
            The width (number of columns) of the underlying pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.Image.BufferHeight">
            <summary>
            The height (number of rows) of the underlying pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.Image.PixelFormat">
            <summary>
            The pixel format of the image
            </summary>
        </member>
        <member name="P:Vuforia.Image.PixelBufferPtr">
            <summary>
            The pointer to the pixel buffer
            </summary>
        </member>
        <member name="P:Vuforia.Image.Pixels">
            <summary>
            Get pixel data of the image
            </summary>
        </member>
        <member name="M:Vuforia.Image.IsNullOrEmpty(Vuforia.Image)">
            <summary>
            Checks whether the image is null or if it's contains any data
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.Image.CopyBufferToTexture(UnityEngine.Texture2D)">
            <summary>
            The whole buffer (i.e. BufferWidth x BufferHeight) is copied to the texture.
            Width, height and format of texture will be updated to fit the input image.
            </summary>
        </member>
        <member name="M:Vuforia.Image.CopyToTexture(UnityEngine.Texture2D)">
            <summary>
            Copies the image into the given texture.
            Width and height of texture will be updated to fit the input image. The image data
            is converted to the format of the texture. Only grayscale, RGB24 and RGBA32 are supported.
            Only the image portion defined by Width and Height is copied to the texture, not the whole buffer.
            </summary>
        </member>
        <member name="M:Vuforia.Image.CopyToTexture(UnityEngine.Texture2D,System.Boolean)">
            <summary>
            Copies the image into the given texture.
            Width and height of texture will be updated to fit the input image. The image data
            is converted to the format of the texture. Only grayscale, RGB24 and RGBA32 are supported.
            Only the image portion defined by Width and Height is copied to the texture, not the whole buffer.
            </summary>
            <param name="texture2D">output texture</param>
            <param name="flipY">whether the image should be flipped in y-direction</param>
        </member>
        <member name="T:Vuforia.ImageDescription">
            \ingroup CameraDeviceGroup
            <summary>
            Contains detailed information of image data
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.Width">
            <summary>
            The width of the image in pixels.
            Note that the pixel buffer can be wider than this.
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.Height">
            <summary>
            The height of the image in pixels.
            Note that the pixel buffer can be higher than this.
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.Stride">
            <summary>
            The number of bytes between the start of a pixel row and the start of the next
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.BufferWidth">
            <summary>
            The width (number of columns) of the underlying pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.BufferHeight">
            <summary>
            The height (number of rows) of the underlying pixel buffer.
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.PixelFormat">
            <summary>
            The pixel format of the image
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.BufferSize">
            <summary>
            The buffer size of the image
            </summary>
        </member>
        <member name="P:Vuforia.ImageDescription.Zero">
            <summary>
            Creates an empty ImageDescription
            </summary>
        </member>
        <member name="T:Vuforia.Intrinsics">
            \ingroup CameraDeviceGroup
            <summary>
            Representation of physical details of the camera. 
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.Size">
            <summary>
            Camera frame resolution in pixels
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.DistortionMode">
            <summary>
            The distortion mode
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.FocalLength">
            <summary>
            Focal length in both the x and y directions
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.PrincipalPoint">
            <summary>
            The principal point
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.FieldOfViewInDeg">
            <summary>
            The field of view in degrees
            </summary>
        </member>
        <member name="P:Vuforia.Intrinsics.DistortionParameters">
            <summary>
            Radial Distortion coefficients
            </summary>
        </member>
        <member name="M:Vuforia.Intrinsics.#ctor(UnityEngine.Vector2,Vuforia.DistortionMode,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single[])">
            <summary>
            Constructor
            </summary>
            <param name="size">The size of the camera image</param>
            <param name="distortionMode">The distortion mode</param>
            <param name="focalLength">The cameras focal length</param>
            <param name="principalPoint">The cameras principal point</param>
            <param name="fieldOfViewInDeg">The field of view of the camera in degrees</param>
            <param name="distortionParameters">The distortion parameters</param>
        </member>
        <member name="T:Vuforia.PixelFormat">
            \ingroup CameraDeviceGroup
            <summary>
            Pixel encoding types
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.UNKNOWN_FORMAT">
            <summary>
            Unknown format - default pixel type for undefined images
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.RGB565">
            <summary>
            A color pixel stored in 2 bytes using 5 bits for red,
            6 bits for green and 5 bits for blue
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.RGB888">
            <summary>
            A color pixel stored in 3 bytes using 8 bits each
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.GRAYSCALE">
            <summary>
            A grayscale pixel stored in one byte
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.RGBA8888">
            <summary>
            A color pixel stored in 4 bytes using 8 bits each
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.NV21">
             <summary>
            A color pixel stored in 12 or more bits using Y, U and V planes
             </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.NV12">
            <summary>
            A color pixel stored in 12 or more bits using Y, U and V planes
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.YV12">
            <summary>
            A color pixel stored in 12 or more bits using discreet Y, U and V planes
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.YUV420P">
            <summary>
            A color pixel stored in 12 or more bits using discreet Y, U and V planes
            </summary>
        </member>
        <member name="F:Vuforia.PixelFormat.YUYV">
            <summary>
            A color pixel stored in 12 or more bits using interleaved Y, U and V planes
            </summary>
        </member>
        <member name="T:Vuforia.VideoBackground">
            \ingroup VideoBackgroundGroup
            <summary>
            Provides access to VideoBackground rendering specific features
            </summary>
        </member>
        <member name="E:Vuforia.VideoBackground.OnVideoBackgroundChanged">
            <summary>
            Gets called when the video background has been updated and is ready to use.
            After this call, it's safe to access the VideoBackgroundTexture
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackground.StartVideoBackgroundRendering">
            <summary>
            Start video background rendering (enable)
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackground.StopVideoBackgroundRendering">
            <summary>
            Stop video background rendering (enable)
            </summary>
        </member>
        <member name="M:Vuforia.VideoBackground.SetVideoBackgroundMaterial(UnityEngine.Material)">
            <summary>
            Set a custom video background material
            </summary>
            <param name="mat"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Vuforia.VideoBackground.VideoBackgroundTexture">
            <summary>
            The texture the video background is rendered into
            </summary>
        </member>
        <member name="T:Vuforia.ISessionRecorder">
            <summary>
            The session recorder allows the user to record Vuforia sessions for playback in the editor
            and on a device 
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.StartRecording(System.Boolean,System.Boolean,Vuforia.RecordingVideoEncodingQuality)">
            <summary>
            Starts recording a Vuforia session. If the captureSensor parameter is set to false, 
            the session recorder will only save the camera feed.
            </summary>
            <param name="captureSensors">
            Determine if the session recorder should also record sensor data. Defaults to true.
            </param>
            <param name="captureAudio">
            Determine if the session recorder should also record audio. Defaults to false.
            </param>
            <param name="encodingQuality">
            Quality settings used for encoding the recorded video. Defaults to High.
            </param>
        </member>
        <member name="M:Vuforia.ISessionRecorder.StopRecording">
            <summary>
            Stops the current recording.
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.ShareRecording">
            <summary>
            Uses the platform's native share functionality to share the latest recorded Vuforia Session.
            </summary>
            <returns>true if the native share popup was shown. false otherwise.</returns>
        </member>
        <member name="M:Vuforia.ISessionRecorder.Clean">
            <summary>
            Deletes ALL the existing recordings on the device.
            </summary>
            <returns>true if all the recordings were successfully deleted. false otherwise.</returns>
        </member>
        <member name="M:Vuforia.ISessionRecorder.GetRecordingStatus">
            <summary>
            Returns the current status of the session recorder.
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.GetRecordingStatusInfo">
            <summary>
            Returns additional status info of the session recorder.
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.GetSupportedSources">
            <summary>
            Returns the sources supported by the device whose data can be recorded.
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.GetDefaultSources">
            <summary>
            Returns the sources that are appropriate for the current device to create AR session recordings
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.ISessionRecorder.GetRecordingPath">
            <summary>
            Returns the path to the last successful recording. If called while recording, it returns the path to
            the current recording.
            It is recommended to preserve a copy of this path if a list of all recordings is needed.
            The session recorder does not keep this information.
            </summary>
        </member>
        <member name="T:Vuforia.SessionRecorder">
            \ingroup SessionRecorderBehaviourGroup
            <summary>
            The session recorder allows the user to record Vuforia sessions for playback in the editor
            and on a device 
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.StartRecording(System.Boolean,System.Boolean,Vuforia.RecordingVideoEncodingQuality)">
            <summary>
            Starts recording a Vuforia session. If the captureSensor parameter is set to false, 
            the session recorder will only save the camera feed.
            </summary>
            <param name="captureSensors">
            Determine if the session recorder should also record sensor data. Defaults to true.
            </param>
            <param name="captureAudio">
            Determine if the session recorder should also record audio. Defaults to false.
            </param>
            <param name="encodingQuality">
            Quality settings used for encoding the recorded video. Defaults to High.
            </param>
        </member>
        <member name="M:Vuforia.SessionRecorder.Start(Vuforia.VuRecordingDataFlags,Vuforia.VuRecordingFrameRate,Vuforia.VuRecordingImageScale,Vuforia.VuRecordingFormat,Vuforia.RecordingVideoEncodingQuality)">
            <summary>
            Start recording a Vuforia session. Internal method in which the sources, the frame rate, the image
            scale and the format of the recording can be configured.
            </summary>
            <param name="dataFlags">The sources that should be recorded (e.g. camera, sensors)</param>
            <param name="frameRate">The frame rate to record camera images</param>
            <param name="imageScale">The scale applied to the camera images when recording them</param>
            <param name="format">Recording format (e.g. DEFAULT, BENCHMARKING)</param>
            <param name="encodingQuality">Encoding quality (bitrate)</param>
        </member>
        <member name="M:Vuforia.SessionRecorder.StopRecording">
            <summary>
            Stops the current recording.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.ShareRecording">
            <summary>
            Uses the platform's native share functionality to share the latest recorded Vuforia Session.
            </summary>
            <returns>true if the native share popup was shown. false otherwise.</returns>
        </member>
        <member name="M:Vuforia.SessionRecorder.Clean">
            <summary>
            Deletes ALL the existing recordings on the device.
            </summary>
            <returns>
            true if all the recordings were successfully deleted. false otherwise.
            </returns>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetRecordingStatus">
            <summary>
            Returns the current status of the session recorder.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetRecordingStatusInfo">
            <summary>
            Returns additional status info of the session recorder.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetDefaultSources">
            <summary>
            Returns the sources that are appropriate for the current device to create AR session recordings
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetSupportedSources">
            <summary>
            Returns the sources supported by the device whose data can be recorded.
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetSupportedSourcesInternal">
            <summary>
            Returns the internal sources supported by the device.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorder.GetRecordingPath">
            <summary>
            Returns the path to the last successful recording. If called while recording, it returns the path to
            the current recording.
            It is recommended to preserve a copy of this path if a list of all recordings is needed.
            The session recorder does not keep this information.
            </summary>
        </member>
        <member name="T:Vuforia.SessionRecorderBehaviour">
            \ingroup SessionRecorderBehaviourGroup
            <summary>
            The session recorder allows the user to record Vuforia sessions for playback in the editor and on a device
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.StartRecording">
            <summary>
            Starts the recording of a Vuforia session. It uses the value assigned to the field CaptureSensorsData
            to configure the Session Recorder. Invokes the OnRecordingStarted event after the recording is started.
            Called from the Record button in the Session Recorder UI.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.StopRecording">
            <summary>
            Stops recording. The method updates the Recording Status and invokes the OnRecordingStopped event. 
            Called from the Stop button in the Session Recorder UI.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.CleanStorage">
            <summary>
            Deletes ALL the existing recordings on the device. The method invokes the
            OnStorageCleaned event with a value of true after the storage has been successfully cleaned.
            It is not allowed to clean the storage while a recording is in progress. In that case,
            or if an error occurs, the OnStorageCleaned event will be invoked with a value of false.
            Called from the Session Recorder UI.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.ShareRecording">
            <summary>
            Uses the platform's native share functionality to share the latest recorded Vuforia Session.
            This method must be called AFTER a recording was successfully saved on disk. In that vase, the
            OnShareRequested event will be invoked with a value of true. If this method is called before any
            session has been recorder or if the native share window is not shown, the OnShareRequested event will
            be invoked with a value of false.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.GetRecordingStatus">
            <summary>
            Returns the current Recording Status.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.GetRecordingStatusInfo">
            <summary>
            Returns additional status info of the session recorder.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.GetSupportedSources">
            <summary>
            Returns the sources supported by the device whose data can be recorded.
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.GetDefaultSources">
            <summary>
            Returns the sources that are appropriate for the current device to create AR session recordings
            The value is a bit-wise combination of the appropriate RecordingSource flags.
            </summary>
        </member>
        <member name="M:Vuforia.SessionRecorderBehaviour.GetRecordingPath">
            <summary>
            Returns the path to the last successful recording. If called while recording, it returns the path to
            the current recording.
            It is recommended to preserve a copy of this path if a list of all recordings is needed.
            The session recorder does not keep this information.
            </summary>
        </member>
        <member name="T:Vuforia.RecordingStatus">
            \ingroup SessionRecorderBehaviourGroup
            <summary>
            Status of the session recorder.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingStatus.INITIALIZED">
            <summary>The recording has been created and can be started.</summary>
        </member>
        <member name="F:Vuforia.RecordingStatus.RUNNING">
            <summary>The recording is in progress.</summary>
        </member>
        <member name="F:Vuforia.RecordingStatus.STOPPED">
            <summary>The recording has stopped. It cannot be started again. Check the status info for further details.</summary>
        </member>
        <member name="T:Vuforia.RecordingStartError">
            <summary>
            Recording start error.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.NONE">
            <summary>No error</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.INTERNAL">
            <summary>Starting failed due to an internal error</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.ANOTHER_RECORDING_RUNNING">
            <summary>
            Failed to start a recording because another recording is already in progress.
            Stop the other recording before starting a new one.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.ENGINE_NOT_RUNNING">
            <summary>Recording cannot be started as the engine is not running</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.INVALID_STATUS">
            <summary>Cannot start a recording that is not in the initialized state. Create a new recording.</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.FILE_CREATION">
            <summary>Cannot start the recording because the output file could not be created</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.UNKNOWN_ORIENTATION">
            <summary>Device is in an unknown or unsupported orientation</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.DATA_SOURCE">
            <summary>
            Failed to start recording from some of the selected data sources. This could happen if e.g.
            another application has exclusive access to a source.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.INSUFFICIENT_FREE_SPACE">
            <summary>Cannot start a recording as there isn't sufficient free space on the device to store it</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.DATA_FLAGS_NOT_SUPPORTED">
            <summary>One or more requested data flags are not supported on the current device</summary>
        </member>
        <member name="F:Vuforia.RecordingStartError.UNITY_PLAYMODE_NOT_SUPPORTED">
            <summary>
            Failed to start recording because it is not supported in Unity PlayMode.
            </summary>
        </member>
        <member name="T:Vuforia.RecordingStatusInfo">
            <summary>
            Session recording status info.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.NORMAL">
            <summary>Normal operation. No error has occurred.</summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.SUCCESS">
            <summary>The recording completed successfully</summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.ERROR_INTERNAL">
            <summary>Recording was aborted due to an internal error</summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.ERROR_ORIENTATION_CHANGED">
            <summary>The device orientation changed during recording</summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.ERROR_DATA_SOURCE">
            <summary>Recording from one of the selected data sources failed</summary>
        </member>
        <member name="F:Vuforia.RecordingStatusInfo.ERROR_INSUFFICIENT_FREE_SPACE">
            <summary>The recording stopped as there isn't sufficient free space on the device to store it</summary>
        </member>
        <member name="T:Vuforia.RecordingSource">
            <summary>
            The sources of data the session recorder can use.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingSource.VIDEO">
            <summary>
            Camera images.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingSource.CAMERA_METADATA">
            <summary>
            Camera metadata required for AR session playback.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingSource.SENSORS">
            <summary>
            Data from device sensors (accelerometer, gyroscope and magnetometer) depending on which are available on the current device.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingSource.DEVICE_POSE">
            <summary>
            Device poses generated by the platform-provided Vuforia Fusion provider.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingSource.AUDIO">
            <summary>
            Audio recording from the default audio input device.
            </summary>
        </member>
        <member name="T:Vuforia.RecordingVideoEncodingQuality">
            <summary>
            Quality settings used for encoding the recorded video.
            </summary>
        </member>
        <member name="F:Vuforia.RecordingVideoEncodingQuality.HIGH">
            <summary>
            High quality video encoding with minimal compression artifacts.
            </summary>
            <remarks>
            Recordings with this setting are suitable for playback as AR sessions,
            but will have an increased file size. This is the default
            (approx. 15MBit/s video bitrate for 720p@30 video).
            </remarks>
        </member>
        <member name="F:Vuforia.RecordingVideoEncodingQuality.MEDIUM">
            <summary>
            Medium quality video encoding for general purpose video recording.
            </summary>
            <remarks>
            Approx. 5MBit/s video bitrate for 720p@30 video.
            </remarks>
        </member>
        <member name="T:Vuforia.GLTFModelCreator">
            \ingroup MeshSetModelreatorGroup
            <summary>
            A utility class that creates Unity meshes from glTF. Used with ModelTarget and AreaTarget datasets
            </summary>
        </member>
        <member name="M:Vuforia.GLTFModelCreator.ExtractModel(System.String,UnityEngine.Material,System.Boolean)">
            <summary>
            Extracts the glTF model at the given path, with the help of the cached files
            Used for Model Target or Area Target extraction run-time
            </summary>
            <param name="path">The path to the glTF model</param>
            <param name="customMaterial">A custom material to apply to the extracted model. If you want to use textures, the material must be based on Unity's "Standard" material</param>
            <param name="ignoreMaterials">If the parser should ignore the materials specified in the glTF file</param>
            <returns>The gameObject that is created from the glTF file</returns>
        </member>
        <member name="M:Vuforia.GLTFModelCreator.ExtractModel(System.String,UnityEngine.Material[],System.Boolean)">
            <summary>
            Extracts the glTF model at the give path, with the help of the cashed files
            Used for Model Target or Area Target extraction run-time
            </summary>
            <param name="path">The path to the glTF model</param>
            <param name="customMaterials">The custom materials to apply to the extracted model. If you want to use textures, the materials must be based on Unity's "Standard" material</param>
            <param name="ignoreMaterials">If the parser should ignore the materials specified in the glTF file</param>
            <returns>The gameObject that is created from the glTF file</returns>
        </member>
        <member name="M:Vuforia.GLTFModelCreator.Clear">
            <summary>
            Clears the allocated native memory
            </summary>
        </member>
        <member name="M:Vuforia.InfoPopup.ShowMessage">
            <summary>Starts the popup with the current message</summary>
            <remarks>Throws a nullpointer exception if the current message is not set.</remarks>
        </member>
        <member name="T:Vuforia.IPlayModeEditorUtility">
            <summary>
            This interface decouples editor specific functionality used in play mode from the runtime classes
            to avoid dependencies to UnityEditor from the main extension codebase.
            The interface is implemented in the Editor library and registered in Play Mode at the PlayModeEditorUtility singleton.
            </summary>
        </member>
        <member name="E:Vuforia.IPlayModeEditorUtility.EditorPauseStateChanged">
            <summary>
            Wraps Unity's EditorApplication.pauseStateChanged
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.DisplayDialog(System.String,System.String,System.String)">
            <summary>
            Displays a popup dialog in the Unity editor
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.LoadAndParseWebcamProfiles">
            <summary>
            Loads web cam profiles from an XML file at a given path and returns all of them
            including the default profile
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.RestartPlayMode">
            <summary>
            Forces a restart of Play Mode in the Editor.
            It is called when Unity re-compiles the scripts shortly after starting play mode.
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.ShowMessageInFocusedEditorWindow(System.String)">
            <summary>
            Displays a large error message in the window that the mouse is currently over
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.IsEULAAccepted">
            <summary>
            Whether Vuforia was enabled in the player settings and the EULA was accepted
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetEmulatorDatabasePath">
            <summary>
            Returns the absolute path to the emulator database to simulate ground plane
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.LoadPrefab(System.String)">
            <summary>
            Load a prefab from a path within the Assets folder
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.RegisterEditorUpdate(System.Action)">
            <summary>
            Register action to be called on Editor update
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.UnregisterEditorUpdate(System.Action)">
            <summary>
            Unregister action from being called on Editor update
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.RegisterSceneViewUpdate(System.Action)">
            <summary>
            Register action to be called when scene view is updated
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.UnregisterSceneViewUpdate(System.Action)">
            <summary>
            Unregister action from being called when scene view is updated
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetEditorPrefsInt(System.String)">
            <summary>
            Get an EditorPref int
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetEditorPrefsFloat(System.String)">
            <summary>
            Get an EditorPref float
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetEditorPrefsString(System.String)">
            <summary>
            Get an EditorPref string
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetEditorPrefAsKeyCode(System.String)">
            <summary>
            Get an EditorPref value as KeyCode.
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetTimeSinceEditorStartUp">
            <summary>
            Fetches the time in seconds from EditorApplication.timeSinceStartup, needed for PC integration
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.GetCurrentSceneCamera">
            <summary>
            Fetches the current camera in the Edtior, needed for PC integration
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.SetEditorPrefsString(System.String,System.String)">
            <summary>
            Set an EditorPref string
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.SetEditorPrefsFloat(System.String,System.Single)">
            <summary>
            Set an EditorPref float
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.SetEditorPrefAsKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Set an EditorPref value as KeyCode
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.IsEditorPrefSet(System.String)">
            <summary>
            Returns true if an EditorPref has already been set
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.DeleteEditorPref(System.String)">
            <summary>
            Deletes an EditorPref
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.CopyAndPasteComponentToTarget(UnityEngine.Component,UnityEngine.GameObject)">
            <summary>
            Copies the given component to the given gameObject
            </summary>
        </member>
        <member name="M:Vuforia.IPlayModeEditorUtility.InsertNewLayerAt(System.Int32,System.String)">
            <summary>
            Changes the last available layer to the given name
            </summary>
        </member>
        <member name="T:Vuforia.LogLevel">
            \ingroup VuforiaApplicationGroup
            <summary>
            Log level for Vuforia logging
            </summary>
        </member>
        <member name="F:Vuforia.LogLevel.ALL">
            <summary>
            Logs all messages
            </summary>
        </member>
        <member name="F:Vuforia.LogLevel.ERROR_AND_WARNING">
            <summary>
            Logs only errors and warnings
            </summary>
        </member>
        <member name="F:Vuforia.LogLevel.ERROR">
            <summary>
            Logs only error messages
            </summary>
        </member>
        <member name="F:Vuforia.LogLevel.NONE">
            <summary>
            Disables Vuforia logging
            </summary>
        </member>
        <member name="T:Vuforia.MaskOutBehaviour">
            \ingroup MeshSetModelreatorGroup
        </member>
        <member name="T:Vuforia.MeshSetModelCreator">
            \ingroup MeshSetModelreatorGroup
        </member>
        <member name="M:Vuforia.MeshSetModelCreator.LoadMeshSet(System.String,System.String,UnityEngine.Transform,Vuforia.StorageType,System.Boolean,System.Boolean,UnityEngine.Material)">
            <summary>
            Loads a Mesh Set for the Area Target from the given path, and then re-parents the created gameObject to the
            parentTransform. The Mesh Set can be loaded with colliders, occlusion or without them
            </summary>
            <param name="dataSetName"></param>
            <param name="path">The path leads to the Point Cloud data</param>
            <param name="parentTransform">The transform which the created gameObject should be parented to</param>
            <param name="storageType"></param>
            <param name="withCollider">Loads the Mesh Set with colliders on</param>
            <param name="withOcclusion">Loads the Mesh Set with a material that makes occlusion possible</param>
            <param name="material">The material to apply to the Mesh Set model</param>
        </member>
        <member name="T:Vuforia.StorageType">
            \ingroup VuforiaRuntimeUtilitiesGroup
            <summary>
            Storage type is used to interpret a given path string.
            </summary>
        </member>
        <member name="F:Vuforia.StorageType.APP">
            <summary>Indicates a relative path to an app-local storage location.</summary>
        </member>
        <member name="F:Vuforia.StorageType.APP_RESOURCE">
            <summary>Indicates a path relative to the StreamingAssets folder.</summary>
        </member>
        <member name="F:Vuforia.StorageType.ABSOLUTE">
            <summary>Indicates an absolute path.</summary>
        </member>
        <member name="T:Vuforia.TurnOffBehaviour">
            \ingroup ObserverBehaviourGroup
            <summary>
            A utility behaviour to disable rendering of a GameObject at run time.
            </summary>
        </member>
        <member name="T:Vuforia.VuforiaAugmentationRenderer">
            \ingroup MeshSetModelreatorGroup
            <summary>
            Special Augmentations which need custom render-(dis/en)abling are inherited from this class
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaAugmentationRenderer.SetActive(System.Boolean)">
            <summary>
            Enables or disables the rendering of this component by activating/deactivating
            child components while also respecting the internal octree optimizations
            </summary>
        </member>
        <member name="T:Vuforia.VuforiaRuntimeUtilities">
            \ingroup VuforiaRuntimeUtilitiesGroup
            <summary>
            A utility class containing various helper methods
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.ConvertScreenToImageSpace(UnityEngine.Vector2)">
            <summary>
            Converts coordinates from screen space to image space.
            </summary>
            <param name="screenPosition">Position in screen space coordinates.</param>
            <returns>Position in image space coordinates.</returns>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.ConvertImageToScreenSpace(UnityEngine.Vector2)">
            <summary>
            Converts coordinates from image space to screen space.
            </summary>
            <param name="imagePosition">Position in image space coordinates.</param>
            <returns>Position in screen space coordinates.</returns>
        </member>
        <member name="P:Vuforia.VuforiaRuntimeUtilities.ScreenOrientation">
            <summary>
            Returns the current screen orientation. In the Editor, the orientation is always LandscapLeft.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.StripStreamingAssetsFromPath(System.String)">
            <summary>
            Returns the file path without the first two elements of the path for
            example it would remove '*/StreamingAssets'.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetImagePathWithExtension(System.String)">
            <summary>
            Append proper extension to file path of image, based on which file exists.
            </summary>
            <returns>false if no image file can be found with the given path</returns>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsWebCamUsed">
            <summary>
            If the web cam is enabled.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsVuforiaEnabled">
            <summary>
            returns true if we have access to Vuforia (on a mobile device OR in the emulator in Unity Pro with a webcam connected)
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsPlayMode">
            <summary>
            returns ONLY true if we are running in Play Mode
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsWebCamPlayMode">
            <summary>
            returns true if we are running in Play Mode with a WebCam
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsSimulatorPlayMode">
            <summary>
            returns ONLY true if we are running in Play Mode in Simulator Mode
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsRecordingPlayMode">
            <summary>
            returns true if we are running in Play Mode with a Recording
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetFullDataSetPath(System.String)">
            <summary>
            Sanitizes streaming assets path for all platforms.
            </summary>
            <param name="dataSetPath">The path to the dataset, relative to the StreamingAssets folder</param>
            <returns>A full path relative to the root of the project. Data/StreamingAssets for UWP and Lumin, Assets/StreamingAssets for the editor, unmodified for other platforms</returns>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetStoragePath(System.String)">
            <summary>
            Returns the correct path based on the current platform.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.IsWSARuntime">
            <summary>
            returns true ONLY if we are in any one of the WSA modes
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetActiveFusionProvider">
            <summary>
            Returns which provider Vuforia Fusion has selected to use
            
            This function must be called after initializing Vuforia. If called before
            initializing Vuforia Engine, the function returns UNKNOWN.
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetPreviewModelPath(System.String)">
            <summary>
            Returns the path of the PreviewModel.prefab. Only usable in Unity Editor
            </summary>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.SetRuntimeEnvironment(Vuforia.Internal.Utility.IRuntimeEnvironment)">
            <summary>
            Set runtime environment for testing
            </summary>
            <param name="runtimeEnvironment"></param>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetAppResourceRelativePath(System.String)">
            <summary>
            Sanitizes StreamingAssets path for all platforms. 
            </summary>
            <param name="path">The path relative to StreamingAssets</param>
            <returns>Path relative to the App Resources folder on different platforms.
            If not running in Editor, Lumin or UWP, the path is left unchanged.</returns>
        </member>
        <member name="M:Vuforia.VuforiaRuntimeUtilities.GetComponentsInChildrenExcluding``2(UnityEngine.GameObject)">
            <summary>
            Recursively traverses the gameObjects hierarchy to find components of type T. Traversal wil stop at 
            gameObjects that contain components of type U.
            </summary>
            <param name="gameObject">The game object</param>
            <typeparam name="T">The component type to look for</typeparam>
            <typeparam name="U">The component type where to stop traversal</typeparam>
            <returns>Enumeration of all found instances of T</returns>
        </member>
        <member name="T:Vuforia.TrackingOptimization">
            \ingroup ObserverBehaviourGroup
            <summary>
            Optimize tracking quality and robustness for different target types
            </summary>
        </member>
        <member name="F:Vuforia.TrackingOptimization.DEFAULT">
            <summary>
             Best tracking performance for the majority of use cases and targets.
            </summary>
        </member>
        <member name="F:Vuforia.TrackingOptimization.LOW_FEATURE_OBJECTS">
            <summary>
            Optimize tracking for objects with smooth, untextured surfaces, that
            lack features and detailed structures, including cars, sheet metal parts
            and many inustrial objects.
            </summary>
            <remarks>
            Do not use for objects that move while being tracked.
            </remarks>
        </member>
        <member name="F:Vuforia.TrackingOptimization.AR_CONTROLLER">
            <summary>
            Optimize tracking for use cases where small, handheld fast moving
            targets are used like a AR/VR controller. Tracking will be less stable
            if the object is stationary.
            </summary>
        </member>
        <member name="T:Vuforia.TrackingOptimizationConversion">
            <summary>
            Optimize tracking quality and robustness for different target types
            </summary>
        </member>
        <member name="M:Vuforia.TrackingOptimizationConversion.FromMotionHintAndTrackingMode(Vuforia.Internal.TargetMotionHint,Vuforia.Internal.ModelTargetTrackingMode)">
             <summary>
             Converts the MotionHint/TrackingMode to the new TrackingOptimization
             using this mapping (https://vuforia.atlassian.net/browse/FOCUSSDK-75212):
            
             | TrackingMode | MotionHint | TrackingOptimization |
             |--------------|------------|----------------------|
             | DEFAULT      | STATIC     | DEFAULT (1)          |
             | DEFAULT      | ADPATIVE   | DEFAULT              |
             | DEFAULT      | DYNAMIC    | AR_CONTROLLER        |
             | CAR          | STATIC     | LOW_FEATURE_OBJECTS  |
             | CAR          | ADAPTIVE   | DEFAULT              |
             | CAR          | DYNAMIC    | AR_CONTROLLER        |
             | SCAN         | STATIC     | DEFAULT (1)(2)       |
             | SCAN         | ADAPTIVE   | DEFAULT (2)          |
             | SCAN         | DYNAMIC    | AR_CONTROLLER (2)    |
            
             (1) STATIC motion hint is no longer supported and therefore an error
             message should be shown in the Model Target editor
            
             (2) Tracking uses the scan thresholds (Determined on native)
             </summary>
        </member>
        <member name="M:Utility.ParsingUtilities.ParseFloat(System.String)">
            <summary>
            Wraps float.Parse using culture-invariant number separators (needed for .NET 4.x compatibility)
            </summary>
        </member>
        <member name="M:Utility.ParsingUtilities.ParseInt(System.String)">
            <summary>
            Wraps Int32.Parse using culture-invariant number separators (needed for .NET 4.x compatibility)
            </summary>
        </member>
        <member name="M:Utility.ParsingUtilities.TryParseFloat(System.String,System.Single@)">
            <summary>
            Wraps float.TryParse using culture-invariant number separators (needed for .NET 4.x compatibility)
            </summary>
        </member>
        <member name="M:Utility.ParsingUtilities.TryParseDouble(System.String,System.Double@)">
            <summary>
            Wraps double.TryParse using culture-invariant number separators (needed for .NET 4.x compatibility)
            </summary>
        </member>
        <member name="M:Utility.ParsingUtilities.TryParseInt(System.String,System.Int32@)">
            <summary>
            Wraps Int32.TryParse using culture-invariant number separators (needed for .NET 4.x compatibility)
            </summary>
        </member>
    </members>
</doc>
